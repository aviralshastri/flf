
flf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d98  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003ea4  08003ea4  00004ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed0  08003ed0  00005018  2**0
                  CONTENTS
  4 .ARM          00000008  08003ed0  08003ed0  00004ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed8  08003ed8  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed8  08003ed8  00004ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003edc  08003edc  00004edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08003ee0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000018  08003ef8  00005018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003ef8  000051cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df70  00000000  00000000  00005041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d5  00000000  00000000  00012fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00015188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad9  00000000  00000000  00015f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183f6  00000000  00000000  00016a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fef0  00000000  00000000  0002ee27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f509  00000000  00000000  0003ed17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce220  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b4  00000000  00000000  000ce264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  000d1c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e8c 	.word	0x08003e8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08003e8c 	.word	0x08003e8c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a1f      	ldr	r2, [pc, #124]	@ (80001e8 <HAL_ADC_ConvCpltCallback+0x8c>)
 800016a:	4293      	cmp	r3, r2
 800016c:	d137      	bne.n	80001de <HAL_ADC_ConvCpltCallback+0x82>
    {
        ir_buffers[write_buf_idx][current_ir] = adc_dma_val;
 800016e:	4b1f      	ldr	r3, [pc, #124]	@ (80001ec <HAL_ADC_ConvCpltCallback+0x90>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	b2db      	uxtb	r3, r3
 8000174:	461a      	mov	r2, r3
 8000176:	4b1e      	ldr	r3, [pc, #120]	@ (80001f0 <HAL_ADC_ConvCpltCallback+0x94>)
 8000178:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800017c:	4b1d      	ldr	r3, [pc, #116]	@ (80001f4 <HAL_ADC_ConvCpltCallback+0x98>)
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	b2db      	uxtb	r3, r3
 8000182:	005b      	lsls	r3, r3, #1
 8000184:	4413      	add	r3, r2
 8000186:	4a1c      	ldr	r2, [pc, #112]	@ (80001f8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000188:	8812      	ldrh	r2, [r2, #0]
 800018a:	b292      	uxth	r2, r2
 800018c:	801a      	strh	r2, [r3, #0]




        current_ir++;
 800018e:	4b19      	ldr	r3, [pc, #100]	@ (80001f4 <HAL_ADC_ConvCpltCallback+0x98>)
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b2db      	uxtb	r3, r3
 8000194:	3301      	adds	r3, #1
 8000196:	b2da      	uxtb	r2, r3
 8000198:	4b16      	ldr	r3, [pc, #88]	@ (80001f4 <HAL_ADC_ConvCpltCallback+0x98>)
 800019a:	701a      	strb	r2, [r3, #0]

        if (current_ir >= IR_CHANNEL_COUNT) {
 800019c:	4b15      	ldr	r3, [pc, #84]	@ (80001f4 <HAL_ADC_ConvCpltCallback+0x98>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	b2db      	uxtb	r3, r3
 80001a2:	2b0f      	cmp	r3, #15
 80001a4:	d915      	bls.n	80001d2 <HAL_ADC_ConvCpltCallback+0x76>
            current_ir = 0;
 80001a6:	4b13      	ldr	r3, [pc, #76]	@ (80001f4 <HAL_ADC_ConvCpltCallback+0x98>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	701a      	strb	r2, [r3, #0]
            write_buf_idx ^= 1;
 80001ac:	4b0f      	ldr	r3, [pc, #60]	@ (80001ec <HAL_ADC_ConvCpltCallback+0x90>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	b2db      	uxtb	r3, r3
 80001b2:	f083 0301 	eor.w	r3, r3, #1
 80001b6:	b2da      	uxtb	r2, r3
 80001b8:	4b0c      	ldr	r3, [pc, #48]	@ (80001ec <HAL_ADC_ConvCpltCallback+0x90>)
 80001ba:	701a      	strb	r2, [r3, #0]
            read_buf_idx ^= 1;
 80001bc:	4b0f      	ldr	r3, [pc, #60]	@ (80001fc <HAL_ADC_ConvCpltCallback+0xa0>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	b2db      	uxtb	r3, r3
 80001c2:	f083 0301 	eor.w	r3, r3, #1
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	4b0c      	ldr	r3, [pc, #48]	@ (80001fc <HAL_ADC_ConvCpltCallback+0xa0>)
 80001ca:	701a      	strb	r2, [r3, #0]
            scan_complete = 1;
 80001cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000200 <HAL_ADC_ConvCpltCallback+0xa4>)
 80001ce:	2201      	movs	r2, #1
 80001d0:	701a      	strb	r2, [r3, #0]
        }

        setMuxChannel(current_ir);
 80001d2:	4b08      	ldr	r3, [pc, #32]	@ (80001f4 <HAL_ADC_ConvCpltCallback+0x98>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 f82b 	bl	8000234 <setMuxChannel>
    }
}
 80001de:	bf00      	nop
 80001e0:	3708      	adds	r7, #8
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40012400 	.word	0x40012400
 80001ec:	200001c0 	.word	0x200001c0
 80001f0:	20000000 	.word	0x20000000
 80001f4:	200001c1 	.word	0x200001c1
 80001f8:	200001c2 	.word	0x200001c2
 80001fc:	20000008 	.word	0x20000008
 8000200:	200001c4 	.word	0x200001c4

08000204 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM4)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a05      	ldr	r2, [pc, #20]	@ (8000228 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000212:	4293      	cmp	r3, r2
 8000214:	d104      	bne.n	8000220 <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_dma_val, 1);
 8000216:	2201      	movs	r2, #1
 8000218:	4904      	ldr	r1, [pc, #16]	@ (800022c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800021a:	4805      	ldr	r0, [pc, #20]	@ (8000230 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800021c:	f000 ff7c 	bl	8001118 <HAL_ADC_Start_DMA>
    }
}
 8000220:	bf00      	nop
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40000800 	.word	0x40000800
 800022c:	200001c2 	.word	0x200001c2
 8000230:	20000034 	.word	0x20000034

08000234 <setMuxChannel>:


void setMuxChannel(uint8_t ch)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
    if(ch >= 16) return;
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	2b0f      	cmp	r3, #15
 8000242:	f200 81b7 	bhi.w	80005b4 <setMuxChannel+0x380>

    switch(ch)
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	f200 81b5 	bhi.w	80005b8 <setMuxChannel+0x384>
 800024e:	a201      	add	r2, pc, #4	@ (adr r2, 8000254 <setMuxChannel+0x20>)
 8000250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000254:	08000295 	.word	0x08000295
 8000258:	080002c7 	.word	0x080002c7
 800025c:	080002f9 	.word	0x080002f9
 8000260:	0800032b 	.word	0x0800032b
 8000264:	0800035d 	.word	0x0800035d
 8000268:	0800038f 	.word	0x0800038f
 800026c:	080003c1 	.word	0x080003c1
 8000270:	080003f3 	.word	0x080003f3
 8000274:	08000425 	.word	0x08000425
 8000278:	08000457 	.word	0x08000457
 800027c:	08000489 	.word	0x08000489
 8000280:	080004bb 	.word	0x080004bb
 8000284:	080004ed 	.word	0x080004ed
 8000288:	0800051f 	.word	0x0800051f
 800028c:	08000551 	.word	0x08000551
 8000290:	08000583 	.word	0x08000583
    {
        case 0:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800029a:	48c9      	ldr	r0, [pc, #804]	@ (80005c0 <setMuxChannel+0x38c>)
 800029c:	f001 ff76 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002a6:	48c6      	ldr	r0, [pc, #792]	@ (80005c0 <setMuxChannel+0x38c>)
 80002a8:	f001 ff70 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002b2:	48c3      	ldr	r0, [pc, #780]	@ (80005c0 <setMuxChannel+0x38c>)
 80002b4:	f001 ff6a 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002be:	48c0      	ldr	r0, [pc, #768]	@ (80005c0 <setMuxChannel+0x38c>)
 80002c0:	f001 ff64 	bl	800218c <HAL_GPIO_WritePin>
            break;
 80002c4:	e179      	b.n	80005ba <setMuxChannel+0x386>

        case 1:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002cc:	48bc      	ldr	r0, [pc, #752]	@ (80005c0 <setMuxChannel+0x38c>)
 80002ce:	f001 ff5d 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002d8:	48b9      	ldr	r0, [pc, #740]	@ (80005c0 <setMuxChannel+0x38c>)
 80002da:	f001 ff57 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002e4:	48b6      	ldr	r0, [pc, #728]	@ (80005c0 <setMuxChannel+0x38c>)
 80002e6:	f001 ff51 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002f0:	48b3      	ldr	r0, [pc, #716]	@ (80005c0 <setMuxChannel+0x38c>)
 80002f2:	f001 ff4b 	bl	800218c <HAL_GPIO_WritePin>
            break;
 80002f6:	e160      	b.n	80005ba <setMuxChannel+0x386>

        case 2:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002fe:	48b0      	ldr	r0, [pc, #704]	@ (80005c0 <setMuxChannel+0x38c>)
 8000300:	f001 ff44 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800030a:	48ad      	ldr	r0, [pc, #692]	@ (80005c0 <setMuxChannel+0x38c>)
 800030c:	f001 ff3e 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000316:	48aa      	ldr	r0, [pc, #680]	@ (80005c0 <setMuxChannel+0x38c>)
 8000318:	f001 ff38 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000322:	48a7      	ldr	r0, [pc, #668]	@ (80005c0 <setMuxChannel+0x38c>)
 8000324:	f001 ff32 	bl	800218c <HAL_GPIO_WritePin>
            break;
 8000328:	e147      	b.n	80005ba <setMuxChannel+0x386>

        case 3:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000330:	48a3      	ldr	r0, [pc, #652]	@ (80005c0 <setMuxChannel+0x38c>)
 8000332:	f001 ff2b 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_SET);
 8000336:	2201      	movs	r2, #1
 8000338:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800033c:	48a0      	ldr	r0, [pc, #640]	@ (80005c0 <setMuxChannel+0x38c>)
 800033e:	f001 ff25 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000348:	489d      	ldr	r0, [pc, #628]	@ (80005c0 <setMuxChannel+0x38c>)
 800034a:	f001 ff1f 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000354:	489a      	ldr	r0, [pc, #616]	@ (80005c0 <setMuxChannel+0x38c>)
 8000356:	f001 ff19 	bl	800218c <HAL_GPIO_WritePin>
            break;
 800035a:	e12e      	b.n	80005ba <setMuxChannel+0x386>

        case 4:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000362:	4897      	ldr	r0, [pc, #604]	@ (80005c0 <setMuxChannel+0x38c>)
 8000364:	f001 ff12 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800036e:	4894      	ldr	r0, [pc, #592]	@ (80005c0 <setMuxChannel+0x38c>)
 8000370:	f001 ff0c 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_SET);
 8000374:	2201      	movs	r2, #1
 8000376:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800037a:	4891      	ldr	r0, [pc, #580]	@ (80005c0 <setMuxChannel+0x38c>)
 800037c:	f001 ff06 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000386:	488e      	ldr	r0, [pc, #568]	@ (80005c0 <setMuxChannel+0x38c>)
 8000388:	f001 ff00 	bl	800218c <HAL_GPIO_WritePin>
            break;
 800038c:	e115      	b.n	80005ba <setMuxChannel+0x386>

        case 5:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_SET);
 800038e:	2201      	movs	r2, #1
 8000390:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000394:	488a      	ldr	r0, [pc, #552]	@ (80005c0 <setMuxChannel+0x38c>)
 8000396:	f001 fef9 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003a0:	4887      	ldr	r0, [pc, #540]	@ (80005c0 <setMuxChannel+0x38c>)
 80003a2:	f001 fef3 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003ac:	4884      	ldr	r0, [pc, #528]	@ (80005c0 <setMuxChannel+0x38c>)
 80003ae:	f001 feed 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003b8:	4881      	ldr	r0, [pc, #516]	@ (80005c0 <setMuxChannel+0x38c>)
 80003ba:	f001 fee7 	bl	800218c <HAL_GPIO_WritePin>
            break;
 80003be:	e0fc      	b.n	80005ba <setMuxChannel+0x386>

        case 6:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003c6:	487e      	ldr	r0, [pc, #504]	@ (80005c0 <setMuxChannel+0x38c>)
 80003c8:	f001 fee0 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003d2:	487b      	ldr	r0, [pc, #492]	@ (80005c0 <setMuxChannel+0x38c>)
 80003d4:	f001 feda 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003de:	4878      	ldr	r0, [pc, #480]	@ (80005c0 <setMuxChannel+0x38c>)
 80003e0:	f001 fed4 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003ea:	4875      	ldr	r0, [pc, #468]	@ (80005c0 <setMuxChannel+0x38c>)
 80003ec:	f001 fece 	bl	800218c <HAL_GPIO_WritePin>
            break;
 80003f0:	e0e3      	b.n	80005ba <setMuxChannel+0x386>

        case 7:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003f8:	4871      	ldr	r0, [pc, #452]	@ (80005c0 <setMuxChannel+0x38c>)
 80003fa:	f001 fec7 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_SET);
 80003fe:	2201      	movs	r2, #1
 8000400:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000404:	486e      	ldr	r0, [pc, #440]	@ (80005c0 <setMuxChannel+0x38c>)
 8000406:	f001 fec1 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_SET);
 800040a:	2201      	movs	r2, #1
 800040c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000410:	486b      	ldr	r0, [pc, #428]	@ (80005c0 <setMuxChannel+0x38c>)
 8000412:	f001 febb 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800041c:	4868      	ldr	r0, [pc, #416]	@ (80005c0 <setMuxChannel+0x38c>)
 800041e:	f001 feb5 	bl	800218c <HAL_GPIO_WritePin>
            break;
 8000422:	e0ca      	b.n	80005ba <setMuxChannel+0x386>

        case 8:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800042a:	4865      	ldr	r0, [pc, #404]	@ (80005c0 <setMuxChannel+0x38c>)
 800042c:	f001 feae 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000436:	4862      	ldr	r0, [pc, #392]	@ (80005c0 <setMuxChannel+0x38c>)
 8000438:	f001 fea8 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000442:	485f      	ldr	r0, [pc, #380]	@ (80005c0 <setMuxChannel+0x38c>)
 8000444:	f001 fea2 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800044e:	485c      	ldr	r0, [pc, #368]	@ (80005c0 <setMuxChannel+0x38c>)
 8000450:	f001 fe9c 	bl	800218c <HAL_GPIO_WritePin>
            break;
 8000454:	e0b1      	b.n	80005ba <setMuxChannel+0x386>

        case 9:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_SET);
 8000456:	2201      	movs	r2, #1
 8000458:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800045c:	4858      	ldr	r0, [pc, #352]	@ (80005c0 <setMuxChannel+0x38c>)
 800045e:	f001 fe95 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000468:	4855      	ldr	r0, [pc, #340]	@ (80005c0 <setMuxChannel+0x38c>)
 800046a:	f001 fe8f 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000474:	4852      	ldr	r0, [pc, #328]	@ (80005c0 <setMuxChannel+0x38c>)
 8000476:	f001 fe89 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_SET);
 800047a:	2201      	movs	r2, #1
 800047c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000480:	484f      	ldr	r0, [pc, #316]	@ (80005c0 <setMuxChannel+0x38c>)
 8000482:	f001 fe83 	bl	800218c <HAL_GPIO_WritePin>
            break;
 8000486:	e098      	b.n	80005ba <setMuxChannel+0x386>

        case 10:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800048e:	484c      	ldr	r0, [pc, #304]	@ (80005c0 <setMuxChannel+0x38c>)
 8000490:	f001 fe7c 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_SET);
 8000494:	2201      	movs	r2, #1
 8000496:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800049a:	4849      	ldr	r0, [pc, #292]	@ (80005c0 <setMuxChannel+0x38c>)
 800049c:	f001 fe76 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004a6:	4846      	ldr	r0, [pc, #280]	@ (80005c0 <setMuxChannel+0x38c>)
 80004a8:	f001 fe70 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004b2:	4843      	ldr	r0, [pc, #268]	@ (80005c0 <setMuxChannel+0x38c>)
 80004b4:	f001 fe6a 	bl	800218c <HAL_GPIO_WritePin>
            break;
 80004b8:	e07f      	b.n	80005ba <setMuxChannel+0x386>

        case 11:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004c0:	483f      	ldr	r0, [pc, #252]	@ (80005c0 <setMuxChannel+0x38c>)
 80004c2:	f001 fe63 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004cc:	483c      	ldr	r0, [pc, #240]	@ (80005c0 <setMuxChannel+0x38c>)
 80004ce:	f001 fe5d 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d8:	4839      	ldr	r0, [pc, #228]	@ (80005c0 <setMuxChannel+0x38c>)
 80004da:	f001 fe57 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004e4:	4836      	ldr	r0, [pc, #216]	@ (80005c0 <setMuxChannel+0x38c>)
 80004e6:	f001 fe51 	bl	800218c <HAL_GPIO_WritePin>
            break;
 80004ea:	e066      	b.n	80005ba <setMuxChannel+0x386>

        case 12:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004f2:	4833      	ldr	r0, [pc, #204]	@ (80005c0 <setMuxChannel+0x38c>)
 80004f4:	f001 fe4a 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004fe:	4830      	ldr	r0, [pc, #192]	@ (80005c0 <setMuxChannel+0x38c>)
 8000500:	f001 fe44 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050a:	482d      	ldr	r0, [pc, #180]	@ (80005c0 <setMuxChannel+0x38c>)
 800050c:	f001 fe3e 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000516:	482a      	ldr	r0, [pc, #168]	@ (80005c0 <setMuxChannel+0x38c>)
 8000518:	f001 fe38 	bl	800218c <HAL_GPIO_WritePin>
            break;
 800051c:	e04d      	b.n	80005ba <setMuxChannel+0x386>

        case 13:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000524:	4826      	ldr	r0, [pc, #152]	@ (80005c0 <setMuxChannel+0x38c>)
 8000526:	f001 fe31 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000530:	4823      	ldr	r0, [pc, #140]	@ (80005c0 <setMuxChannel+0x38c>)
 8000532:	f001 fe2b 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800053c:	4820      	ldr	r0, [pc, #128]	@ (80005c0 <setMuxChannel+0x38c>)
 800053e:	f001 fe25 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000548:	481d      	ldr	r0, [pc, #116]	@ (80005c0 <setMuxChannel+0x38c>)
 800054a:	f001 fe1f 	bl	800218c <HAL_GPIO_WritePin>
            break;
 800054e:	e034      	b.n	80005ba <setMuxChannel+0x386>

        case 14:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000556:	481a      	ldr	r0, [pc, #104]	@ (80005c0 <setMuxChannel+0x38c>)
 8000558:	f001 fe18 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000562:	4817      	ldr	r0, [pc, #92]	@ (80005c0 <setMuxChannel+0x38c>)
 8000564:	f001 fe12 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800056e:	4814      	ldr	r0, [pc, #80]	@ (80005c0 <setMuxChannel+0x38c>)
 8000570:	f001 fe0c 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800057a:	4811      	ldr	r0, [pc, #68]	@ (80005c0 <setMuxChannel+0x38c>)
 800057c:	f001 fe06 	bl	800218c <HAL_GPIO_WritePin>
            break;
 8000580:	e01b      	b.n	80005ba <setMuxChannel+0x386>

        case 15:
            HAL_GPIO_WritePin(GPIOB, S0_Pin, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000588:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <setMuxChannel+0x38c>)
 800058a:	f001 fdff 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S1_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000594:	480a      	ldr	r0, [pc, #40]	@ (80005c0 <setMuxChannel+0x38c>)
 8000596:	f001 fdf9 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S2_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a0:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <setMuxChannel+0x38c>)
 80005a2:	f001 fdf3 	bl	800218c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, S3_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <setMuxChannel+0x38c>)
 80005ae:	f001 fded 	bl	800218c <HAL_GPIO_WritePin>
            break;
 80005b2:	e002      	b.n	80005ba <setMuxChannel+0x386>
    if(ch >= 16) return;
 80005b4:	bf00      	nop
 80005b6:	e000      	b.n	80005ba <setMuxChannel+0x386>

        default:
            break;
 80005b8:	bf00      	nop
    }
}
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40010c00 	.word	0x40010c00

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b0c1      	sub	sp, #260	@ 0x104
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fc6b 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f889 	bl	80006e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  memset((void*)ir_buffer0, 0, sizeof(ir_buffer0));
 80005d2:	2220      	movs	r2, #32
 80005d4:	2100      	movs	r1, #0
 80005d6:	483a      	ldr	r0, [pc, #232]	@ (80006c0 <main+0xfc>)
 80005d8:	f003 fc2c 	bl	8003e34 <memset>
  memset((void*)ir_buffer1, 0, sizeof(ir_buffer1));
 80005dc:	2220      	movs	r2, #32
 80005de:	2100      	movs	r1, #0
 80005e0:	4838      	ldr	r0, [pc, #224]	@ (80006c4 <main+0x100>)
 80005e2:	f003 fc27 	bl	8003e34 <memset>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fa0f 	bl	8000a08 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 f9ef 	bl	80009cc <MX_DMA_Init>
  MX_ADC1_Init();
 80005ee:	f000 f8d5 	bl	800079c <MX_ADC1_Init>
  MX_TIM3_Init();
 80005f2:	f000 f911 	bl	8000818 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80005f6:	f000 f9bf 	bl	8000978 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80005fa:	f000 f971 	bl	80008e0 <MX_TIM4_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80005fe:	4832      	ldr	r0, [pc, #200]	@ (80006c8 <main+0x104>)
 8000600:	f002 faf2 	bl	8002be8 <HAL_TIM_Base_Start_IT>
  setMuxChannel(0);
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff fe15 	bl	8000234 <setMuxChannel>
  char line[256];

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800060a:	2100      	movs	r1, #0
 800060c:	482f      	ldr	r0, [pc, #188]	@ (80006cc <main+0x108>)
 800060e:	f002 fb8d 	bl	8002d2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000612:	2104      	movs	r1, #4
 8000614:	482d      	ldr	r0, [pc, #180]	@ (80006cc <main+0x108>)
 8000616:	f002 fb89 	bl	8002d2c <HAL_TIM_PWM_Start>

  // Bring STBY high to enable driver
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2108      	movs	r1, #8
 800061e:	482c      	ldr	r0, [pc, #176]	@ (80006d0 <main+0x10c>)
 8000620:	f001 fdb4 	bl	800218c <HAL_GPIO_WritePin>

  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Transmit(&huart3, (uint8_t*)write_buf_idx, strlen(write_buf_idx), HAL_MAX_DELAY);
 8000624:	4b2b      	ldr	r3, [pc, #172]	@ (80006d4 <main+0x110>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	461c      	mov	r4, r3
 800062c:	4b29      	ldr	r3, [pc, #164]	@ (80006d4 <main+0x110>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fd8a 	bl	800014c <strlen>
 8000638:	4603      	mov	r3, r0
 800063a:	b29a      	uxth	r2, r3
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	4621      	mov	r1, r4
 8000642:	4825      	ldr	r0, [pc, #148]	@ (80006d8 <main+0x114>)
 8000644:	f003 fa22 	bl	8003a8c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*)current_ir, strlen(current_ir), HAL_MAX_DELAY);
 8000648:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <main+0x118>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	461c      	mov	r4, r3
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <main+0x118>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fd78 	bl	800014c <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	4621      	mov	r1, r4
 8000666:	481c      	ldr	r0, [pc, #112]	@ (80006d8 <main+0x114>)
 8000668:	f003 fa10 	bl	8003a8c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*)ir_buffers[write_buf_idx][current_ir], strlen(ir_buffers[write_buf_idx][current_ir]), HAL_MAX_DELAY);
 800066c:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <main+0x110>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	461a      	mov	r2, r3
 8000674:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <main+0x11c>)
 8000676:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800067a:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <main+0x118>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	4413      	add	r3, r2
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	b29b      	uxth	r3, r3
 8000688:	461c      	mov	r4, r3
 800068a:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <main+0x110>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <main+0x11c>)
 8000694:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000698:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <main+0x118>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff fd50 	bl	800014c <strlen>
 80006ac:	4603      	mov	r3, r0
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	4621      	mov	r1, r4
 80006b6:	4808      	ldr	r0, [pc, #32]	@ (80006d8 <main+0x114>)
 80006b8:	f003 f9e8 	bl	8003a8c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*)write_buf_idx, strlen(write_buf_idx), HAL_MAX_DELAY);
 80006bc:	bf00      	nop
 80006be:	e7b1      	b.n	8000624 <main+0x60>
 80006c0:	20000180 	.word	0x20000180
 80006c4:	200001a0 	.word	0x200001a0
 80006c8:	200000f0 	.word	0x200000f0
 80006cc:	200000a8 	.word	0x200000a8
 80006d0:	40010800 	.word	0x40010800
 80006d4:	200001c0 	.word	0x200001c0
 80006d8:	20000138 	.word	0x20000138
 80006dc:	200001c1 	.word	0x200001c1
 80006e0:	20000000 	.word	0x20000000

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	@ 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ee:	2228      	movs	r2, #40	@ 0x28
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 fb9e 	bl	8003e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800071c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000722:	2301      	movs	r3, #1
 8000724:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800072e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000730:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000734:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fd3e 	bl	80021bc <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000746:	f000 f9cd 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2302      	movs	r3, #2
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800075a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2102      	movs	r1, #2
 8000766:	4618      	mov	r0, r3
 8000768:	f001 ffaa 	bl	80026c0 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000772:	f000 f9b7 	bl	8000ae4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000776:	2302      	movs	r3, #2
 8000778:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800077a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800077e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4618      	mov	r0, r3
 8000784:	f002 f92a 	bl	80029dc <HAL_RCCEx_PeriphCLKConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800078e:	f000 f9a9 	bl	8000ae4 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3750      	adds	r7, #80	@ 0x50
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ac:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <MX_ADC1_Init+0x74>)
 80007ae:	4a19      	ldr	r2, [pc, #100]	@ (8000814 <MX_ADC1_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b2:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <MX_ADC1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <MX_ADC1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_ADC1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <MX_ADC1_Init+0x74>)
 80007c6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80007ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007cc:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <MX_ADC1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_ADC1_Init+0x74>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d8:	480d      	ldr	r0, [pc, #52]	@ (8000810 <MX_ADC1_Init+0x74>)
 80007da:	f000 fbc5 	bl	8000f68 <HAL_ADC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007e4:	f000 f97e 	bl	8000ae4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80007f0:	2305      	movs	r3, #5
 80007f2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_ADC1_Init+0x74>)
 80007fa:	f000 fe45 	bl	8001488 <HAL_ADC_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000804:	f000 f96e 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000034 	.word	0x20000034
 8000814:	40012400 	.word	0x40012400

08000818 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800083a:	4b27      	ldr	r3, [pc, #156]	@ (80008d8 <MX_TIM3_Init+0xc0>)
 800083c:	4a27      	ldr	r2, [pc, #156]	@ (80008dc <MX_TIM3_Init+0xc4>)
 800083e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000840:	4b25      	ldr	r3, [pc, #148]	@ (80008d8 <MX_TIM3_Init+0xc0>)
 8000842:	2247      	movs	r2, #71	@ 0x47
 8000844:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000846:	4b24      	ldr	r3, [pc, #144]	@ (80008d8 <MX_TIM3_Init+0xc0>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800084c:	4b22      	ldr	r3, [pc, #136]	@ (80008d8 <MX_TIM3_Init+0xc0>)
 800084e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000852:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000854:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <MX_TIM3_Init+0xc0>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800085a:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <MX_TIM3_Init+0xc0>)
 800085c:	2280      	movs	r2, #128	@ 0x80
 800085e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000860:	481d      	ldr	r0, [pc, #116]	@ (80008d8 <MX_TIM3_Init+0xc0>)
 8000862:	f002 fa13 	bl	8002c8c <HAL_TIM_PWM_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800086c:	f000 f93a 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000878:	f107 0320 	add.w	r3, r7, #32
 800087c:	4619      	mov	r1, r3
 800087e:	4816      	ldr	r0, [pc, #88]	@ (80008d8 <MX_TIM3_Init+0xc0>)
 8000880:	f003 f844 	bl	800390c <HAL_TIMEx_MasterConfigSynchronization>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800088a:	f000 f92b 	bl	8000ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800088e:	2360      	movs	r3, #96	@ 0x60
 8000890:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	4619      	mov	r1, r3
 80008a4:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <MX_TIM3_Init+0xc0>)
 80008a6:	f002 fbd3 	bl	8003050 <HAL_TIM_PWM_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80008b0:	f000 f918 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2204      	movs	r2, #4
 80008b8:	4619      	mov	r1, r3
 80008ba:	4807      	ldr	r0, [pc, #28]	@ (80008d8 <MX_TIM3_Init+0xc0>)
 80008bc:	f002 fbc8 	bl	8003050 <HAL_TIM_PWM_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80008c6:	f000 f90d 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008ca:	4803      	ldr	r0, [pc, #12]	@ (80008d8 <MX_TIM3_Init+0xc0>)
 80008cc:	f000 f9f6 	bl	8000cbc <HAL_TIM_MspPostInit>

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	@ 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000a8 	.word	0x200000a8
 80008dc:	40000400 	.word	0x40000400

080008e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <MX_TIM4_Init+0x90>)
 80008fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000974 <MX_TIM4_Init+0x94>)
 8000900:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000902:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <MX_TIM4_Init+0x90>)
 8000904:	2247      	movs	r2, #71	@ 0x47
 8000906:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <MX_TIM4_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5-1;
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <MX_TIM4_Init+0x90>)
 8000910:	2204      	movs	r2, #4
 8000912:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000914:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <MX_TIM4_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <MX_TIM4_Init+0x90>)
 800091c:	2280      	movs	r2, #128	@ 0x80
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000920:	4813      	ldr	r0, [pc, #76]	@ (8000970 <MX_TIM4_Init+0x90>)
 8000922:	f002 f911 	bl	8002b48 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 800092c:	f000 f8da 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000934:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	4619      	mov	r1, r3
 800093c:	480c      	ldr	r0, [pc, #48]	@ (8000970 <MX_TIM4_Init+0x90>)
 800093e:	f002 fc49 	bl	80031d4 <HAL_TIM_ConfigClockSource>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000948:	f000 f8cc 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094c:	2300      	movs	r3, #0
 800094e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_TIM4_Init+0x90>)
 800095a:	f002 ffd7 	bl	800390c <HAL_TIMEx_MasterConfigSynchronization>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000964:	f000 f8be 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200000f0 	.word	0x200000f0
 8000974:	40000800 	.word	0x40000800

08000978 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 800097e:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <MX_USART3_UART_Init+0x50>)
 8000980:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_USART3_UART_Init+0x4c>)
 80009b0:	f003 f81c 	bl	80039ec <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009ba:	f000 f893 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000138 	.word	0x20000138
 80009c8:	40004800 	.word	0x40004800

080009cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <MX_DMA_Init+0x38>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000a04 <MX_DMA_Init+0x38>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <MX_DMA_Init+0x38>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	200b      	movs	r0, #11
 80009f0:	f001 f823 	bl	8001a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009f4:	200b      	movs	r0, #11
 80009f6:	f001 f83c 	bl	8001a72 <HAL_NVIC_EnableIRQ>

}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a22:	f043 0320 	orr.w	r3, r3, #32
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0320 	and.w	r3, r3, #32
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a27      	ldr	r2, [pc, #156]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a21      	ldr	r2, [pc, #132]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0308 	and.w	r3, r3, #8
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA2_Pin|INA1_Pin|STDBY_Pin|INB1_Pin
 8000a64:	2200      	movs	r2, #0
 8000a66:	213e      	movs	r1, #62	@ 0x3e
 8000a68:	481c      	ldr	r0, [pc, #112]	@ (8000adc <MX_GPIO_Init+0xd4>)
 8000a6a:	f001 fb8f 	bl	800218c <HAL_GPIO_WritePin>
                          |INB2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S3_Pin|S2_Pin|S1_Pin|S0_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000a74:	481a      	ldr	r0, [pc, #104]	@ (8000ae0 <MX_GPIO_Init+0xd8>)
 8000a76:	f001 fb89 	bl	800218c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INA2_Pin INA1_Pin STDBY_Pin INB1_Pin
                           INB2_Pin */
  GPIO_InitStruct.Pin = INA2_Pin|INA1_Pin|STDBY_Pin|INB1_Pin
 8000a7a:	233e      	movs	r3, #62	@ 0x3e
 8000a7c:	613b      	str	r3, [r7, #16]
                          |INB2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4812      	ldr	r0, [pc, #72]	@ (8000adc <MX_GPIO_Init+0xd4>)
 8000a92:	f001 f9f7 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : S3_Pin S2_Pin S1_Pin S0_Pin */
  GPIO_InitStruct.Pin = S3_Pin|S2_Pin|S1_Pin|S0_Pin;
 8000a96:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000a9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4619      	mov	r1, r3
 8000aae:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <MX_GPIO_Init+0xd8>)
 8000ab0:	f001 f9e8 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON1_Pin;
 8000ab4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_GPIO_Init+0xd8>)
 8000aca:	f001 f9db 	bl	8001e84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ace:	bf00      	nop
 8000ad0:	3720      	adds	r7, #32
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	40010c00 	.word	0x40010c00

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <Error_Handler+0x8>

08000af0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <HAL_MspInit+0x5c>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	4a14      	ldr	r2, [pc, #80]	@ (8000b4c <HAL_MspInit+0x5c>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6193      	str	r3, [r2, #24]
 8000b02:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <HAL_MspInit+0x5c>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <HAL_MspInit+0x5c>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a0e      	ldr	r2, [pc, #56]	@ (8000b4c <HAL_MspInit+0x5c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <HAL_MspInit+0x5c>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <HAL_MspInit+0x60>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <HAL_MspInit+0x60>)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010000 	.word	0x40010000

08000b54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a2c      	ldr	r2, [pc, #176]	@ (8000c20 <HAL_ADC_MspInit+0xcc>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d151      	bne.n	8000c18 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b74:	4b2b      	ldr	r3, [pc, #172]	@ (8000c24 <HAL_ADC_MspInit+0xd0>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a2a      	ldr	r2, [pc, #168]	@ (8000c24 <HAL_ADC_MspInit+0xd0>)
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b28      	ldr	r3, [pc, #160]	@ (8000c24 <HAL_ADC_MspInit+0xd0>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b25      	ldr	r3, [pc, #148]	@ (8000c24 <HAL_ADC_MspInit+0xd0>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a24      	ldr	r2, [pc, #144]	@ (8000c24 <HAL_ADC_MspInit+0xd0>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <HAL_ADC_MspInit+0xd0>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481d      	ldr	r0, [pc, #116]	@ (8000c28 <HAL_ADC_MspInit+0xd4>)
 8000bb4:	f001 f966 	bl	8001e84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <HAL_ADC_MspInit+0xd8>)
 8000bba:	4a1d      	ldr	r2, [pc, #116]	@ (8000c30 <HAL_ADC_MspInit+0xdc>)
 8000bbc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <HAL_ADC_MspInit+0xd8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc4:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <HAL_ADC_MspInit+0xd8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bca:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <HAL_ADC_MspInit+0xd8>)
 8000bcc:	2280      	movs	r2, #128	@ 0x80
 8000bce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <HAL_ADC_MspInit+0xd8>)
 8000bd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bd6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <HAL_ADC_MspInit+0xd8>)
 8000bda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bde:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <HAL_ADC_MspInit+0xd8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000be6:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <HAL_ADC_MspInit+0xd8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bec:	480f      	ldr	r0, [pc, #60]	@ (8000c2c <HAL_ADC_MspInit+0xd8>)
 8000bee:	f000 ff5b 	bl	8001aa8 <HAL_DMA_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000bf8:	f7ff ff74 	bl	8000ae4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8000c2c <HAL_ADC_MspInit+0xd8>)
 8000c00:	621a      	str	r2, [r3, #32]
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <HAL_ADC_MspInit+0xd8>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2012      	movs	r0, #18
 8000c0e:	f000 ff14 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c12:	2012      	movs	r0, #18
 8000c14:	f000 ff2d 	bl	8001a72 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40012400 	.word	0x40012400
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010800 	.word	0x40010800
 8000c2c:	20000064 	.word	0x20000064
 8000c30:	40020008 	.word	0x40020008

08000c34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a09      	ldr	r2, [pc, #36]	@ (8000c68 <HAL_TIM_PWM_MspInit+0x34>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d10b      	bne.n	8000c5e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <HAL_TIM_PWM_MspInit+0x38>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <HAL_TIM_PWM_MspInit+0x38>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	61d3      	str	r3, [r2, #28]
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_TIM_PWM_MspInit+0x38>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	40000400 	.word	0x40000400
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <HAL_TIM_Base_MspInit+0x44>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d113      	bne.n	8000caa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x48>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x48>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	61d3      	str	r3, [r2, #28]
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x48>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2105      	movs	r1, #5
 8000c9e:	201e      	movs	r0, #30
 8000ca0:	f000 fecb 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ca4:	201e      	movs	r0, #30
 8000ca6:	f000 fee4 	bl	8001a72 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40000800 	.word	0x40000800
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d14 <HAL_TIM_MspPostInit+0x58>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d117      	bne.n	8000d0c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <HAL_TIM_MspPostInit+0x5c>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <HAL_TIM_MspPostInit+0x5c>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <HAL_TIM_MspPostInit+0x5c>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8000cf4:	23c0      	movs	r3, #192	@ 0xc0
 8000cf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <HAL_TIM_MspPostInit+0x60>)
 8000d08:	f001 f8bc 	bl	8001e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40000400 	.word	0x40000400
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010800 	.word	0x40010800

08000d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dac <HAL_UART_MspInit+0x8c>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d131      	bne.n	8000da4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d40:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <HAL_UART_MspInit+0x90>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	4a1a      	ldr	r2, [pc, #104]	@ (8000db0 <HAL_UART_MspInit+0x90>)
 8000d46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d4a:	61d3      	str	r3, [r2, #28]
 8000d4c:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <HAL_UART_MspInit+0x90>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <HAL_UART_MspInit+0x90>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a14      	ldr	r2, [pc, #80]	@ (8000db0 <HAL_UART_MspInit+0x90>)
 8000d5e:	f043 0308 	orr.w	r3, r3, #8
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_UART_MspInit+0x90>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	4619      	mov	r1, r3
 8000d84:	480b      	ldr	r0, [pc, #44]	@ (8000db4 <HAL_UART_MspInit+0x94>)
 8000d86:	f001 f87d 	bl	8001e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <HAL_UART_MspInit+0x94>)
 8000da0:	f001 f870 	bl	8001e84 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000da4:	bf00      	nop
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40004800 	.word	0x40004800
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <NMI_Handler+0x4>

08000dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <MemManage_Handler+0x4>

08000dd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <UsageFault_Handler+0x4>

08000de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 f892 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <DMA1_Channel1_IRQHandler+0x10>)
 8000e16:	f000 ff01 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000064 	.word	0x20000064

08000e24 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <ADC1_2_IRQHandler+0x10>)
 8000e2a:	f000 fa53 	bl	80012d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000034 	.word	0x20000034

08000e38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <TIM4_IRQHandler+0x10>)
 8000e3e:	f002 f817 	bl	8002e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000f0 	.word	0x200000f0

08000e4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e58:	f7ff fff8 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480b      	ldr	r0, [pc, #44]	@ (8000e8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e5e:	490c      	ldr	r1, [pc, #48]	@ (8000e90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e60:	4a0c      	ldr	r2, [pc, #48]	@ (8000e94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a09      	ldr	r2, [pc, #36]	@ (8000e98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e74:	4c09      	ldr	r4, [pc, #36]	@ (8000e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f002 ffdf 	bl	8003e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e86:	f7ff fb9d 	bl	80005c4 <main>
  bx lr
 8000e8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000e94:	08003ee0 	.word	0x08003ee0
  ldr r2, =_sbss
 8000e98:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000e9c:	200001cc 	.word	0x200001cc

08000ea0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <CAN1_RX1_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <HAL_Init+0x28>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	@ (8000ecc <HAL_Init+0x28>)
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 fdb5 	bl	8001a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	200f      	movs	r0, #15
 8000ebc:	f000 f808 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fe16 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40022000 	.word	0x40022000

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fdcd 	bl	8001a8e <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 fd95 	bl	8001a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	@ (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000000c 	.word	0x2000000c
 8000f28:	20000014 	.word	0x20000014
 8000f2c:	20000010 	.word	0x20000010

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <HAL_IncTick+0x1c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <HAL_IncTick+0x20>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a03      	ldr	r2, [pc, #12]	@ (8000f50 <HAL_IncTick+0x20>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	20000014 	.word	0x20000014
 8000f50:	200001c8 	.word	0x200001c8

08000f54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b02      	ldr	r3, [pc, #8]	@ (8000f64 <HAL_GetTick+0x10>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	200001c8 	.word	0x200001c8

08000f68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e0be      	b.n	8001108 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d109      	bne.n	8000fac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff fdd4 	bl	8000b54 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 fbbd 	bl	800172c <ADC_ConversionStop_Disable>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fba:	f003 0310 	and.w	r3, r3, #16
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f040 8099 	bne.w	80010f6 <HAL_ADC_Init+0x18e>
 8000fc4:	7dfb      	ldrb	r3, [r7, #23]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f040 8095 	bne.w	80010f6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fd4:	f023 0302 	bic.w	r3, r3, #2
 8000fd8:	f043 0202 	orr.w	r2, r3, #2
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fe8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7b1b      	ldrb	r3, [r3, #12]
 8000fee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ff0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001000:	d003      	beq.n	800100a <HAL_ADC_Init+0xa2>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d102      	bne.n	8001010 <HAL_ADC_Init+0xa8>
 800100a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800100e:	e000      	b.n	8001012 <HAL_ADC_Init+0xaa>
 8001010:	2300      	movs	r3, #0
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7d1b      	ldrb	r3, [r3, #20]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d119      	bne.n	8001054 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7b1b      	ldrb	r3, [r3, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d109      	bne.n	800103c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	3b01      	subs	r3, #1
 800102e:	035a      	lsls	r2, r3, #13
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	e00b      	b.n	8001054 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001040:	f043 0220 	orr.w	r2, r3, #32
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800104c:	f043 0201 	orr.w	r2, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	430a      	orrs	r2, r1
 8001066:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <HAL_ADC_Init+0x1a8>)
 8001070:	4013      	ands	r3, r2
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	68b9      	ldr	r1, [r7, #8]
 8001078:	430b      	orrs	r3, r1
 800107a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001084:	d003      	beq.n	800108e <HAL_ADC_Init+0x126>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d104      	bne.n	8001098 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	3b01      	subs	r3, #1
 8001094:	051b      	lsls	r3, r3, #20
 8001096:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800109e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <HAL_ADC_Init+0x1ac>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d10b      	bne.n	80010d4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c6:	f023 0303 	bic.w	r3, r3, #3
 80010ca:	f043 0201 	orr.w	r2, r3, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010d2:	e018      	b.n	8001106 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d8:	f023 0312 	bic.w	r3, r3, #18
 80010dc:	f043 0210 	orr.w	r2, r3, #16
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e8:	f043 0201 	orr.w	r2, r3, #1
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010f4:	e007      	b.n	8001106 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fa:	f043 0210 	orr.w	r2, r3, #16
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001106:	7dfb      	ldrb	r3, [r7, #23]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	ffe1f7fd 	.word	0xffe1f7fd
 8001114:	ff1f0efe 	.word	0xff1f0efe

08001118 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a64      	ldr	r2, [pc, #400]	@ (80012c0 <HAL_ADC_Start_DMA+0x1a8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d004      	beq.n	800113c <HAL_ADC_Start_DMA+0x24>
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a63      	ldr	r2, [pc, #396]	@ (80012c4 <HAL_ADC_Start_DMA+0x1ac>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d106      	bne.n	800114a <HAL_ADC_Start_DMA+0x32>
 800113c:	4b60      	ldr	r3, [pc, #384]	@ (80012c0 <HAL_ADC_Start_DMA+0x1a8>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001144:	2b00      	cmp	r3, #0
 8001146:	f040 80b3 	bne.w	80012b0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001150:	2b01      	cmp	r3, #1
 8001152:	d101      	bne.n	8001158 <HAL_ADC_Start_DMA+0x40>
 8001154:	2302      	movs	r3, #2
 8001156:	e0ae      	b.n	80012b6 <HAL_ADC_Start_DMA+0x19e>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f000 fa89 	bl	8001678 <ADC_Enable>
 8001166:	4603      	mov	r3, r0
 8001168:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	2b00      	cmp	r3, #0
 800116e:	f040 809a 	bne.w	80012a6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001176:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800117a:	f023 0301 	bic.w	r3, r3, #1
 800117e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a4e      	ldr	r2, [pc, #312]	@ (80012c4 <HAL_ADC_Start_DMA+0x1ac>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d105      	bne.n	800119c <HAL_ADC_Start_DMA+0x84>
 8001190:	4b4b      	ldr	r3, [pc, #300]	@ (80012c0 <HAL_ADC_Start_DMA+0x1a8>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d115      	bne.n	80011c8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d026      	beq.n	8001204 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011c6:	e01d      	b.n	8001204 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011cc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a39      	ldr	r2, [pc, #228]	@ (80012c0 <HAL_ADC_Start_DMA+0x1a8>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d004      	beq.n	80011e8 <HAL_ADC_Start_DMA+0xd0>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a38      	ldr	r2, [pc, #224]	@ (80012c4 <HAL_ADC_Start_DMA+0x1ac>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d10d      	bne.n	8001204 <HAL_ADC_Start_DMA+0xec>
 80011e8:	4b35      	ldr	r3, [pc, #212]	@ (80012c0 <HAL_ADC_Start_DMA+0x1a8>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d007      	beq.n	8001204 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001208:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001214:	f023 0206 	bic.w	r2, r3, #6
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800121c:	e002      	b.n	8001224 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	4a25      	ldr	r2, [pc, #148]	@ (80012c8 <HAL_ADC_Start_DMA+0x1b0>)
 8001232:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4a24      	ldr	r2, [pc, #144]	@ (80012cc <HAL_ADC_Start_DMA+0x1b4>)
 800123a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4a23      	ldr	r2, [pc, #140]	@ (80012d0 <HAL_ADC_Start_DMA+0x1b8>)
 8001242:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f06f 0202 	mvn.w	r2, #2
 800124c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800125c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6a18      	ldr	r0, [r3, #32]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	334c      	adds	r3, #76	@ 0x4c
 8001268:	4619      	mov	r1, r3
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f000 fc75 	bl	8001b5c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800127c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001280:	d108      	bne.n	8001294 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001290:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001292:	e00f      	b.n	80012b4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80012a2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80012a4:	e006      	b.n	80012b4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80012ae:	e001      	b.n	80012b4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40012400 	.word	0x40012400
 80012c4:	40012800 	.word	0x40012800
 80012c8:	080017af 	.word	0x080017af
 80012cc:	0800182b 	.word	0x0800182b
 80012d0:	08001847 	.word	0x08001847

080012d4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f003 0320 	and.w	r3, r3, #32
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d03e      	beq.n	8001374 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d039      	beq.n	8001374 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	2b00      	cmp	r3, #0
 800130a:	d105      	bne.n	8001318 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001310:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001322:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001326:	d11d      	bne.n	8001364 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800132c:	2b00      	cmp	r3, #0
 800132e:	d119      	bne.n	8001364 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0220 	bic.w	r2, r2, #32
 800133e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001344:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001350:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d105      	bne.n	8001364 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135c:	f043 0201 	orr.w	r2, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7fe fef9 	bl	800015c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f06f 0212 	mvn.w	r2, #18
 8001372:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800137a:	2b00      	cmp	r3, #0
 800137c:	d04d      	beq.n	800141a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	d048      	beq.n	800141a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	2b00      	cmp	r3, #0
 8001392:	d105      	bne.n	80013a0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001398:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80013aa:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80013ae:	d012      	beq.n	80013d6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d125      	bne.n	800140a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80013c8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013cc:	d11d      	bne.n	800140a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d119      	bne.n	800140a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013e4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d105      	bne.n	800140a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001402:	f043 0201 	orr.w	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fa35 	bl	800187a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f06f 020c 	mvn.w	r2, #12
 8001418:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001420:	2b00      	cmp	r3, #0
 8001422:	d012      	beq.n	800144a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00d      	beq.n	800144a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001432:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f812 	bl	8001464 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f06f 0201 	mvn.w	r2, #1
 8001448:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x20>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e0dc      	b.n	8001662 <HAL_ADC_ConfigChannel+0x1da>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b06      	cmp	r3, #6
 80014b6:	d81c      	bhi.n	80014f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	3b05      	subs	r3, #5
 80014ca:	221f      	movs	r2, #31
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4019      	ands	r1, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	3b05      	subs	r3, #5
 80014e4:	fa00 f203 	lsl.w	r2, r0, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80014f0:	e03c      	b.n	800156c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d81c      	bhi.n	8001534 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b23      	subs	r3, #35	@ 0x23
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	4019      	ands	r1, r3
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	3b23      	subs	r3, #35	@ 0x23
 8001526:	fa00 f203 	lsl.w	r2, r0, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	631a      	str	r2, [r3, #48]	@ 0x30
 8001532:	e01b      	b.n	800156c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	3b41      	subs	r3, #65	@ 0x41
 8001546:	221f      	movs	r2, #31
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	4019      	ands	r1, r3
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	3b41      	subs	r3, #65	@ 0x41
 8001560:	fa00 f203 	lsl.w	r2, r0, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b09      	cmp	r3, #9
 8001572:	d91c      	bls.n	80015ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68d9      	ldr	r1, [r3, #12]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4613      	mov	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	3b1e      	subs	r3, #30
 8001586:	2207      	movs	r2, #7
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	4019      	ands	r1, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	6898      	ldr	r0, [r3, #8]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	3b1e      	subs	r3, #30
 80015a0:	fa00 f203 	lsl.w	r2, r0, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	e019      	b.n	80015e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6919      	ldr	r1, [r3, #16]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	2207      	movs	r2, #7
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	4019      	ands	r1, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6898      	ldr	r0, [r3, #8]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	fa00 f203 	lsl.w	r2, r0, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d003      	beq.n	80015f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015ee:	2b11      	cmp	r3, #17
 80015f0:	d132      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a1d      	ldr	r2, [pc, #116]	@ (800166c <HAL_ADC_ConfigChannel+0x1e4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d125      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d126      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001618:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b10      	cmp	r3, #16
 8001620:	d11a      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <HAL_ADC_ConfigChannel+0x1e8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a13      	ldr	r2, [pc, #76]	@ (8001674 <HAL_ADC_ConfigChannel+0x1ec>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	0c9a      	lsrs	r2, r3, #18
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001638:	e002      	b.n	8001640 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	3b01      	subs	r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f9      	bne.n	800163a <HAL_ADC_ConfigChannel+0x1b2>
 8001646:	e007      	b.n	8001658 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164c:	f043 0220 	orr.w	r2, r3, #32
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	40012400 	.word	0x40012400
 8001670:	2000000c 	.word	0x2000000c
 8001674:	431bde83 	.word	0x431bde83

08001678 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b01      	cmp	r3, #1
 8001694:	d040      	beq.n	8001718 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <ADC_Enable+0xac>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001728 <ADC_Enable+0xb0>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	0c9b      	lsrs	r3, r3, #18
 80016b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016b4:	e002      	b.n	80016bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f9      	bne.n	80016b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016c2:	f7ff fc47 	bl	8000f54 <HAL_GetTick>
 80016c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016c8:	e01f      	b.n	800170a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016ca:	f7ff fc43 	bl	8000f54 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d918      	bls.n	800170a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d011      	beq.n	800170a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ea:	f043 0210 	orr.w	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f6:	f043 0201 	orr.w	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e007      	b.n	800171a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b01      	cmp	r3, #1
 8001716:	d1d8      	bne.n	80016ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000000c 	.word	0x2000000c
 8001728:	431bde83 	.word	0x431bde83

0800172c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b01      	cmp	r3, #1
 8001744:	d12e      	bne.n	80017a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001756:	f7ff fbfd 	bl	8000f54 <HAL_GetTick>
 800175a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800175c:	e01b      	b.n	8001796 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800175e:	f7ff fbf9 	bl	8000f54 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d914      	bls.n	8001796 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b01      	cmp	r3, #1
 8001778:	d10d      	bne.n	8001796 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177e:	f043 0210 	orr.w	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178a:	f043 0201 	orr.w	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e007      	b.n	80017a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d0dc      	beq.n	800175e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ba:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d127      	bne.n	8001818 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80017de:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80017e2:	d115      	bne.n	8001810 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d111      	bne.n	8001810 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f7fe fca3 	bl	800015c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001816:	e004      	b.n	8001822 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	4798      	blx	r3
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001836:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f7ff fe0a 	bl	8001452 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b084      	sub	sp, #16
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001852:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001858:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001864:	f043 0204 	orr.w	r2, r3, #4
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f7ff fe02 	bl	8001476 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018be:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60d3      	str	r3, [r2, #12]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db0b      	blt.n	800191a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	4906      	ldr	r1, [pc, #24]	@ (8001924 <__NVIC_EnableIRQ+0x34>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	2001      	movs	r0, #1
 8001912:	fa00 f202 	lsl.w	r2, r0, r2
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100

08001928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	db0a      	blt.n	8001952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	490c      	ldr	r1, [pc, #48]	@ (8001974 <__NVIC_SetPriority+0x4c>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	0112      	lsls	r2, r2, #4
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	440b      	add	r3, r1
 800194c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001950:	e00a      	b.n	8001968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4908      	ldr	r1, [pc, #32]	@ (8001978 <__NVIC_SetPriority+0x50>)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	3b04      	subs	r3, #4
 8001960:	0112      	lsls	r2, r2, #4
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	440b      	add	r3, r1
 8001966:	761a      	strb	r2, [r3, #24]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e100 	.word	0xe000e100
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	@ 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f1c3 0307 	rsb	r3, r3, #7
 8001996:	2b04      	cmp	r3, #4
 8001998:	bf28      	it	cs
 800199a:	2304      	movcs	r3, #4
 800199c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3304      	adds	r3, #4
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d902      	bls.n	80019ac <NVIC_EncodePriority+0x30>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3b03      	subs	r3, #3
 80019aa:	e000      	b.n	80019ae <NVIC_EncodePriority+0x32>
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43da      	mvns	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	401a      	ands	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	43d9      	mvns	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	4313      	orrs	r3, r2
         );
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3724      	adds	r7, #36	@ 0x24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019f0:	d301      	bcc.n	80019f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00f      	b.n	8001a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a20 <SysTick_Config+0x40>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fe:	210f      	movs	r1, #15
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f7ff ff90 	bl	8001928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <SysTick_Config+0x40>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0e:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <SysTick_Config+0x40>)
 8001a10:	2207      	movs	r2, #7
 8001a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	e000e010 	.word	0xe000e010

08001a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ff2d 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a4c:	f7ff ff42 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	6978      	ldr	r0, [r7, #20]
 8001a58:	f7ff ff90 	bl	800197c <NVIC_EncodePriority>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff5f 	bl	8001928 <__NVIC_SetPriority>
}
 8001a6a:	bf00      	nop
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff35 	bl	80018f0 <__NVIC_EnableIRQ>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ffa2 	bl	80019e0 <SysTick_Config>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e043      	b.n	8001b46 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b22      	ldr	r3, [pc, #136]	@ (8001b50 <HAL_DMA_Init+0xa8>)
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a22      	ldr	r2, [pc, #136]	@ (8001b54 <HAL_DMA_Init+0xac>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	009a      	lsls	r2, r3, #2
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b58 <HAL_DMA_Init+0xb0>)
 8001ada:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001af2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001af6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	bffdfff8 	.word	0xbffdfff8
 8001b54:	cccccccd 	.word	0xcccccccd
 8001b58:	40020000 	.word	0x40020000

08001b5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_DMA_Start_IT+0x20>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e04b      	b.n	8001c14 <HAL_DMA_Start_IT+0xb8>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d13a      	bne.n	8001c06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0201 	bic.w	r2, r2, #1
 8001bac:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	68b9      	ldr	r1, [r7, #8]
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f937 	bl	8001e28 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 020e 	orr.w	r2, r2, #14
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	e00f      	b.n	8001bf4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0204 	bic.w	r2, r2, #4
 8001be2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 020a 	orr.w	r2, r2, #10
 8001bf2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	e005      	b.n	8001c12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	2204      	movs	r2, #4
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d04f      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0xc8>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d04a      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0320 	and.w	r3, r3, #32
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0204 	bic.w	r2, r2, #4
 8001c6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a66      	ldr	r2, [pc, #408]	@ (8001e0c <HAL_DMA_IRQHandler+0x1f0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d029      	beq.n	8001cca <HAL_DMA_IRQHandler+0xae>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a65      	ldr	r2, [pc, #404]	@ (8001e10 <HAL_DMA_IRQHandler+0x1f4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d022      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0xaa>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a63      	ldr	r2, [pc, #396]	@ (8001e14 <HAL_DMA_IRQHandler+0x1f8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d01a      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0xa4>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a62      	ldr	r2, [pc, #392]	@ (8001e18 <HAL_DMA_IRQHandler+0x1fc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d012      	beq.n	8001cba <HAL_DMA_IRQHandler+0x9e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a60      	ldr	r2, [pc, #384]	@ (8001e1c <HAL_DMA_IRQHandler+0x200>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00a      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x98>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a5f      	ldr	r2, [pc, #380]	@ (8001e20 <HAL_DMA_IRQHandler+0x204>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d102      	bne.n	8001cae <HAL_DMA_IRQHandler+0x92>
 8001ca8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cac:	e00e      	b.n	8001ccc <HAL_DMA_IRQHandler+0xb0>
 8001cae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001cb2:	e00b      	b.n	8001ccc <HAL_DMA_IRQHandler+0xb0>
 8001cb4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001cb8:	e008      	b.n	8001ccc <HAL_DMA_IRQHandler+0xb0>
 8001cba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001cbe:	e005      	b.n	8001ccc <HAL_DMA_IRQHandler+0xb0>
 8001cc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cc4:	e002      	b.n	8001ccc <HAL_DMA_IRQHandler+0xb0>
 8001cc6:	2340      	movs	r3, #64	@ 0x40
 8001cc8:	e000      	b.n	8001ccc <HAL_DMA_IRQHandler+0xb0>
 8001cca:	2304      	movs	r3, #4
 8001ccc:	4a55      	ldr	r2, [pc, #340]	@ (8001e24 <HAL_DMA_IRQHandler+0x208>)
 8001cce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 8094 	beq.w	8001e02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001ce2:	e08e      	b.n	8001e02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	2202      	movs	r2, #2
 8001cea:	409a      	lsls	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d056      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x186>
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d051      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0320 	and.w	r3, r3, #32
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10b      	bne.n	8001d24 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 020a 	bic.w	r2, r2, #10
 8001d1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a38      	ldr	r2, [pc, #224]	@ (8001e0c <HAL_DMA_IRQHandler+0x1f0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d029      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x166>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a37      	ldr	r2, [pc, #220]	@ (8001e10 <HAL_DMA_IRQHandler+0x1f4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d022      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x162>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a35      	ldr	r2, [pc, #212]	@ (8001e14 <HAL_DMA_IRQHandler+0x1f8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d01a      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x15c>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a34      	ldr	r2, [pc, #208]	@ (8001e18 <HAL_DMA_IRQHandler+0x1fc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d012      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x156>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a32      	ldr	r2, [pc, #200]	@ (8001e1c <HAL_DMA_IRQHandler+0x200>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00a      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x150>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a31      	ldr	r2, [pc, #196]	@ (8001e20 <HAL_DMA_IRQHandler+0x204>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d102      	bne.n	8001d66 <HAL_DMA_IRQHandler+0x14a>
 8001d60:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d64:	e00e      	b.n	8001d84 <HAL_DMA_IRQHandler+0x168>
 8001d66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d6a:	e00b      	b.n	8001d84 <HAL_DMA_IRQHandler+0x168>
 8001d6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d70:	e008      	b.n	8001d84 <HAL_DMA_IRQHandler+0x168>
 8001d72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d76:	e005      	b.n	8001d84 <HAL_DMA_IRQHandler+0x168>
 8001d78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d7c:	e002      	b.n	8001d84 <HAL_DMA_IRQHandler+0x168>
 8001d7e:	2320      	movs	r3, #32
 8001d80:	e000      	b.n	8001d84 <HAL_DMA_IRQHandler+0x168>
 8001d82:	2302      	movs	r3, #2
 8001d84:	4a27      	ldr	r2, [pc, #156]	@ (8001e24 <HAL_DMA_IRQHandler+0x208>)
 8001d86:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d034      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001da0:	e02f      	b.n	8001e02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	2208      	movs	r2, #8
 8001da8:	409a      	lsls	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d028      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x1e8>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d023      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 020e 	bic.w	r2, r2, #14
 8001dca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d004      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	4798      	blx	r3
    }
  }
  return;
 8001e02:	bf00      	nop
 8001e04:	bf00      	nop
}
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40020008 	.word	0x40020008
 8001e10:	4002001c 	.word	0x4002001c
 8001e14:	40020030 	.word	0x40020030
 8001e18:	40020044 	.word	0x40020044
 8001e1c:	40020058 	.word	0x40020058
 8001e20:	4002006c 	.word	0x4002006c
 8001e24:	40020000 	.word	0x40020000

08001e28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e3e:	2101      	movs	r1, #1
 8001e40:	fa01 f202 	lsl.w	r2, r1, r2
 8001e44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b10      	cmp	r3, #16
 8001e54:	d108      	bne.n	8001e68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e66:	e007      	b.n	8001e78 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	60da      	str	r2, [r3, #12]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b08b      	sub	sp, #44	@ 0x2c
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e96:	e169      	b.n	800216c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8158 	bne.w	8002166 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4a9a      	ldr	r2, [pc, #616]	@ (8002124 <HAL_GPIO_Init+0x2a0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d05e      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ec0:	4a98      	ldr	r2, [pc, #608]	@ (8002124 <HAL_GPIO_Init+0x2a0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d875      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ec6:	4a98      	ldr	r2, [pc, #608]	@ (8002128 <HAL_GPIO_Init+0x2a4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d058      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ecc:	4a96      	ldr	r2, [pc, #600]	@ (8002128 <HAL_GPIO_Init+0x2a4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d86f      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ed2:	4a96      	ldr	r2, [pc, #600]	@ (800212c <HAL_GPIO_Init+0x2a8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d052      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ed8:	4a94      	ldr	r2, [pc, #592]	@ (800212c <HAL_GPIO_Init+0x2a8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d869      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ede:	4a94      	ldr	r2, [pc, #592]	@ (8002130 <HAL_GPIO_Init+0x2ac>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d04c      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ee4:	4a92      	ldr	r2, [pc, #584]	@ (8002130 <HAL_GPIO_Init+0x2ac>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d863      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001eea:	4a92      	ldr	r2, [pc, #584]	@ (8002134 <HAL_GPIO_Init+0x2b0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d046      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ef0:	4a90      	ldr	r2, [pc, #576]	@ (8002134 <HAL_GPIO_Init+0x2b0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d85d      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ef6:	2b12      	cmp	r3, #18
 8001ef8:	d82a      	bhi.n	8001f50 <HAL_GPIO_Init+0xcc>
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d859      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001efe:	a201      	add	r2, pc, #4	@ (adr r2, 8001f04 <HAL_GPIO_Init+0x80>)
 8001f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f04:	08001f7f 	.word	0x08001f7f
 8001f08:	08001f59 	.word	0x08001f59
 8001f0c:	08001f6b 	.word	0x08001f6b
 8001f10:	08001fad 	.word	0x08001fad
 8001f14:	08001fb3 	.word	0x08001fb3
 8001f18:	08001fb3 	.word	0x08001fb3
 8001f1c:	08001fb3 	.word	0x08001fb3
 8001f20:	08001fb3 	.word	0x08001fb3
 8001f24:	08001fb3 	.word	0x08001fb3
 8001f28:	08001fb3 	.word	0x08001fb3
 8001f2c:	08001fb3 	.word	0x08001fb3
 8001f30:	08001fb3 	.word	0x08001fb3
 8001f34:	08001fb3 	.word	0x08001fb3
 8001f38:	08001fb3 	.word	0x08001fb3
 8001f3c:	08001fb3 	.word	0x08001fb3
 8001f40:	08001fb3 	.word	0x08001fb3
 8001f44:	08001fb3 	.word	0x08001fb3
 8001f48:	08001f61 	.word	0x08001f61
 8001f4c:	08001f75 	.word	0x08001f75
 8001f50:	4a79      	ldr	r2, [pc, #484]	@ (8002138 <HAL_GPIO_Init+0x2b4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f56:	e02c      	b.n	8001fb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	623b      	str	r3, [r7, #32]
          break;
 8001f5e:	e029      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	3304      	adds	r3, #4
 8001f66:	623b      	str	r3, [r7, #32]
          break;
 8001f68:	e024      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	3308      	adds	r3, #8
 8001f70:	623b      	str	r3, [r7, #32]
          break;
 8001f72:	e01f      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	330c      	adds	r3, #12
 8001f7a:	623b      	str	r3, [r7, #32]
          break;
 8001f7c:	e01a      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d102      	bne.n	8001f8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f86:	2304      	movs	r3, #4
 8001f88:	623b      	str	r3, [r7, #32]
          break;
 8001f8a:	e013      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d105      	bne.n	8001fa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f94:	2308      	movs	r3, #8
 8001f96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	611a      	str	r2, [r3, #16]
          break;
 8001f9e:	e009      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	615a      	str	r2, [r3, #20]
          break;
 8001faa:	e003      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fac:	2300      	movs	r3, #0
 8001fae:	623b      	str	r3, [r7, #32]
          break;
 8001fb0:	e000      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          break;
 8001fb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2bff      	cmp	r3, #255	@ 0xff
 8001fb8:	d801      	bhi.n	8001fbe <HAL_GPIO_Init+0x13a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	e001      	b.n	8001fc2 <HAL_GPIO_Init+0x13e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2bff      	cmp	r3, #255	@ 0xff
 8001fc8:	d802      	bhi.n	8001fd0 <HAL_GPIO_Init+0x14c>
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x152>
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd2:	3b08      	subs	r3, #8
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	210f      	movs	r1, #15
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	6a39      	ldr	r1, [r7, #32]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80b1 	beq.w	8002166 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002004:	4b4d      	ldr	r3, [pc, #308]	@ (800213c <HAL_GPIO_Init+0x2b8>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a4c      	ldr	r2, [pc, #304]	@ (800213c <HAL_GPIO_Init+0x2b8>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6193      	str	r3, [r2, #24]
 8002010:	4b4a      	ldr	r3, [pc, #296]	@ (800213c <HAL_GPIO_Init+0x2b8>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800201c:	4a48      	ldr	r2, [pc, #288]	@ (8002140 <HAL_GPIO_Init+0x2bc>)
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	3302      	adds	r3, #2
 8002024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002028:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	220f      	movs	r2, #15
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4013      	ands	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a40      	ldr	r2, [pc, #256]	@ (8002144 <HAL_GPIO_Init+0x2c0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d013      	beq.n	8002070 <HAL_GPIO_Init+0x1ec>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3f      	ldr	r2, [pc, #252]	@ (8002148 <HAL_GPIO_Init+0x2c4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00d      	beq.n	800206c <HAL_GPIO_Init+0x1e8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3e      	ldr	r2, [pc, #248]	@ (800214c <HAL_GPIO_Init+0x2c8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <HAL_GPIO_Init+0x1e4>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3d      	ldr	r2, [pc, #244]	@ (8002150 <HAL_GPIO_Init+0x2cc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_GPIO_Init+0x1e0>
 8002060:	2303      	movs	r3, #3
 8002062:	e006      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 8002064:	2304      	movs	r3, #4
 8002066:	e004      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 8002068:	2302      	movs	r3, #2
 800206a:	e002      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <HAL_GPIO_Init+0x1ee>
 8002070:	2300      	movs	r3, #0
 8002072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002074:	f002 0203 	and.w	r2, r2, #3
 8002078:	0092      	lsls	r2, r2, #2
 800207a:	4093      	lsls	r3, r2
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002082:	492f      	ldr	r1, [pc, #188]	@ (8002140 <HAL_GPIO_Init+0x2bc>)
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800209c:	4b2d      	ldr	r3, [pc, #180]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	492c      	ldr	r1, [pc, #176]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	608b      	str	r3, [r1, #8]
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4928      	ldr	r1, [pc, #160]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020c4:	4b23      	ldr	r3, [pc, #140]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	4922      	ldr	r1, [pc, #136]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60cb      	str	r3, [r1, #12]
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020d2:	4b20      	ldr	r3, [pc, #128]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	43db      	mvns	r3, r3
 80020da:	491e      	ldr	r1, [pc, #120]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020dc:	4013      	ands	r3, r2
 80020de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d006      	beq.n	80020fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020ec:	4b19      	ldr	r3, [pc, #100]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	4918      	ldr	r1, [pc, #96]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020fa:	4b16      	ldr	r3, [pc, #88]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	43db      	mvns	r3, r3
 8002102:	4914      	ldr	r1, [pc, #80]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 8002104:	4013      	ands	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d021      	beq.n	8002158 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002114:	4b0f      	ldr	r3, [pc, #60]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	490e      	ldr	r1, [pc, #56]	@ (8002154 <HAL_GPIO_Init+0x2d0>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
 8002120:	e021      	b.n	8002166 <HAL_GPIO_Init+0x2e2>
 8002122:	bf00      	nop
 8002124:	10320000 	.word	0x10320000
 8002128:	10310000 	.word	0x10310000
 800212c:	10220000 	.word	0x10220000
 8002130:	10210000 	.word	0x10210000
 8002134:	10120000 	.word	0x10120000
 8002138:	10110000 	.word	0x10110000
 800213c:	40021000 	.word	0x40021000
 8002140:	40010000 	.word	0x40010000
 8002144:	40010800 	.word	0x40010800
 8002148:	40010c00 	.word	0x40010c00
 800214c:	40011000 	.word	0x40011000
 8002150:	40011400 	.word	0x40011400
 8002154:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002158:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <HAL_GPIO_Init+0x304>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	43db      	mvns	r3, r3
 8002160:	4909      	ldr	r1, [pc, #36]	@ (8002188 <HAL_GPIO_Init+0x304>)
 8002162:	4013      	ands	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	3301      	adds	r3, #1
 800216a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	fa22 f303 	lsr.w	r3, r2, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	f47f ae8e 	bne.w	8001e98 <HAL_GPIO_Init+0x14>
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	372c      	adds	r7, #44	@ 0x2c
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	40010400 	.word	0x40010400

0800218c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
 8002198:	4613      	mov	r3, r2
 800219a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800219c:	787b      	ldrb	r3, [r7, #1]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021a8:	e003      	b.n	80021b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021aa:	887b      	ldrh	r3, [r7, #2]
 80021ac:	041a      	lsls	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	611a      	str	r2, [r3, #16]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e272      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8087 	beq.w	80022ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021dc:	4b92      	ldr	r3, [pc, #584]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d00c      	beq.n	8002202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d112      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
 80021f4:	4b8c      	ldr	r3, [pc, #560]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002200:	d10b      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002202:	4b89      	ldr	r3, [pc, #548]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d06c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x12c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d168      	bne.n	80022e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e24c      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x76>
 8002224:	4b80      	ldr	r3, [pc, #512]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a7f      	ldr	r2, [pc, #508]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 800222a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e02e      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b7b      	ldr	r3, [pc, #492]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7a      	ldr	r2, [pc, #488]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b78      	ldr	r3, [pc, #480]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a77      	ldr	r2, [pc, #476]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e01d      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0xbc>
 800225e:	4b72      	ldr	r3, [pc, #456]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a71      	ldr	r2, [pc, #452]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b6f      	ldr	r3, [pc, #444]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6e      	ldr	r2, [pc, #440]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002278:	4b6b      	ldr	r3, [pc, #428]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a6a      	ldr	r2, [pc, #424]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b68      	ldr	r3, [pc, #416]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a67      	ldr	r2, [pc, #412]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800228e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7fe fe5c 	bl	8000f54 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7fe fe58 	bl	8000f54 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	@ 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e200      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0xe4>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe fe48 	bl	8000f54 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c8:	f7fe fe44 	bl	8000f54 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	@ 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1ec      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	4b53      	ldr	r3, [pc, #332]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x10c>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d063      	beq.n	80023be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002302:	4b49      	ldr	r3, [pc, #292]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d11c      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
 800230e:	4b46      	ldr	r3, [pc, #280]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	4b43      	ldr	r3, [pc, #268]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1c0      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b3d      	ldr	r3, [pc, #244]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4939      	ldr	r1, [pc, #228]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	e03a      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002350:	4b36      	ldr	r3, [pc, #216]	@ (800242c <HAL_RCC_OscConfig+0x270>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7fe fdfd 	bl	8000f54 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7fe fdf9 	bl	8000f54 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1a1      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	4b2d      	ldr	r3, [pc, #180]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b2a      	ldr	r3, [pc, #168]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4927      	ldr	r1, [pc, #156]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b26      	ldr	r3, [pc, #152]	@ (800242c <HAL_RCC_OscConfig+0x270>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7fe fddc 	bl	8000f54 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a0:	f7fe fdd8 	bl	8000f54 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e180      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d03a      	beq.n	8002440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d019      	beq.n	8002406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b17      	ldr	r3, [pc, #92]	@ (8002430 <HAL_RCC_OscConfig+0x274>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7fe fdbc 	bl	8000f54 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7fe fdb8 	bl	8000f54 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e160      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fe:	2001      	movs	r0, #1
 8002400:	f000 face 	bl	80029a0 <RCC_Delay>
 8002404:	e01c      	b.n	8002440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002406:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <HAL_RCC_OscConfig+0x274>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7fe fda2 	bl	8000f54 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002412:	e00f      	b.n	8002434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7fe fd9e 	bl	8000f54 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d908      	bls.n	8002434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e146      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	42420000 	.word	0x42420000
 8002430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	4b92      	ldr	r3, [pc, #584]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e9      	bne.n	8002414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a6 	beq.w	800259a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002452:	4b8b      	ldr	r3, [pc, #556]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10d      	bne.n	800247a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b88      	ldr	r3, [pc, #544]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a87      	ldr	r2, [pc, #540]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002468:	61d3      	str	r3, [r2, #28]
 800246a:	4b85      	ldr	r3, [pc, #532]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b82      	ldr	r3, [pc, #520]	@ (8002684 <HAL_RCC_OscConfig+0x4c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b7f      	ldr	r3, [pc, #508]	@ (8002684 <HAL_RCC_OscConfig+0x4c8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a7e      	ldr	r2, [pc, #504]	@ (8002684 <HAL_RCC_OscConfig+0x4c8>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7fe fd5f 	bl	8000f54 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7fe fd5b 	bl	8000f54 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	@ 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e103      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b75      	ldr	r3, [pc, #468]	@ (8002684 <HAL_RCC_OscConfig+0x4c8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x312>
 80024c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	e02d      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x334>
 80024d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a69      	ldr	r2, [pc, #420]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6213      	str	r3, [r2, #32]
 80024e2:	4b67      	ldr	r3, [pc, #412]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a66      	ldr	r2, [pc, #408]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	6213      	str	r3, [r2, #32]
 80024ee:	e01c      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_OscConfig+0x356>
 80024f8:	4b61      	ldr	r3, [pc, #388]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4a60      	ldr	r2, [pc, #384]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	6213      	str	r3, [r2, #32]
 8002504:	4b5e      	ldr	r3, [pc, #376]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a5d      	ldr	r2, [pc, #372]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	e00b      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 8002512:	4b5b      	ldr	r3, [pc, #364]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a5a      	ldr	r2, [pc, #360]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b58      	ldr	r3, [pc, #352]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a57      	ldr	r2, [pc, #348]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d015      	beq.n	800255e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7fe fd0f 	bl	8000f54 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7fe fd0b 	bl	8000f54 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0b1      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	4b4b      	ldr	r3, [pc, #300]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ee      	beq.n	800253a <HAL_RCC_OscConfig+0x37e>
 800255c:	e014      	b.n	8002588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fcf9 	bl	8000f54 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe fcf5 	bl	8000f54 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e09b      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	4b40      	ldr	r3, [pc, #256]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1ee      	bne.n	8002566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b3c      	ldr	r3, [pc, #240]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4a3b      	ldr	r2, [pc, #236]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8087 	beq.w	80026b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a4:	4b36      	ldr	r3, [pc, #216]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d061      	beq.n	8002674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d146      	bne.n	8002646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b8:	4b33      	ldr	r3, [pc, #204]	@ (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7fe fcc9 	bl	8000f54 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7fe fcc5 	bl	8000f54 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e06d      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	4b29      	ldr	r3, [pc, #164]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ec:	d108      	bne.n	8002600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ee:	4b24      	ldr	r3, [pc, #144]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4921      	ldr	r1, [pc, #132]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002600:	4b1f      	ldr	r3, [pc, #124]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a19      	ldr	r1, [r3, #32]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	430b      	orrs	r3, r1
 8002612:	491b      	ldr	r1, [pc, #108]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7fe fc99 	bl	8000f54 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7fe fc95 	bl	8000f54 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e03d      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002638:	4b11      	ldr	r3, [pc, #68]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x46a>
 8002644:	e035      	b.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7fe fc82 	bl	8000f54 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe fc7e 	bl	8000f54 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e026      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x498>
 8002672:	e01e      	b.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d107      	bne.n	800268c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e019      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
 8002688:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800268c:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <HAL_RCC_OscConfig+0x500>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	429a      	cmp	r2, r3
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0d0      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d910      	bls.n	8002704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b67      	ldr	r3, [pc, #412]	@ (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0207 	bic.w	r2, r3, #7
 80026ea:	4965      	ldr	r1, [pc, #404]	@ (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b63      	ldr	r3, [pc, #396]	@ (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0b8      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800271c:	4b59      	ldr	r3, [pc, #356]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a58      	ldr	r2, [pc, #352]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002726:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002734:	4b53      	ldr	r3, [pc, #332]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a52      	ldr	r2, [pc, #328]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800273e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002740:	4b50      	ldr	r3, [pc, #320]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	494d      	ldr	r1, [pc, #308]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d040      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	4b47      	ldr	r3, [pc, #284]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d115      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e07f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277e:	4b41      	ldr	r3, [pc, #260]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e073      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278e:	4b3d      	ldr	r3, [pc, #244]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e06b      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279e:	4b39      	ldr	r3, [pc, #228]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f023 0203 	bic.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4936      	ldr	r1, [pc, #216]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b0:	f7fe fbd0 	bl	8000f54 <HAL_GetTick>
 80027b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b8:	f7fe fbcc 	bl	8000f54 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e053      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 020c 	and.w	r2, r3, #12
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	429a      	cmp	r2, r3
 80027de:	d1eb      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e0:	4b27      	ldr	r3, [pc, #156]	@ (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d210      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b24      	ldr	r3, [pc, #144]	@ (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 0207 	bic.w	r2, r3, #7
 80027f6:	4922      	ldr	r1, [pc, #136]	@ (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b20      	ldr	r3, [pc, #128]	@ (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e032      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281c:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4916      	ldr	r1, [pc, #88]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800283a:	4b12      	ldr	r3, [pc, #72]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	490e      	ldr	r1, [pc, #56]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284e:	f000 f821 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	490a      	ldr	r1, [pc, #40]	@ (8002888 <HAL_RCC_ClockConfig+0x1c8>)
 8002860:	5ccb      	ldrb	r3, [r1, r3]
 8002862:	fa22 f303 	lsr.w	r3, r2, r3
 8002866:	4a09      	ldr	r2, [pc, #36]	@ (800288c <HAL_RCC_ClockConfig+0x1cc>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <HAL_RCC_ClockConfig+0x1d0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fb2e 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40022000 	.word	0x40022000
 8002884:	40021000 	.word	0x40021000
 8002888:	08003ea4 	.word	0x08003ea4
 800288c:	2000000c 	.word	0x2000000c
 8002890:	20000010 	.word	0x20000010

08002894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x94>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d002      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x30>
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d003      	beq.n	80028ca <HAL_RCC_GetSysClockFreq+0x36>
 80028c2:	e027      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c4:	4b19      	ldr	r3, [pc, #100]	@ (800292c <HAL_RCC_GetSysClockFreq+0x98>)
 80028c6:	613b      	str	r3, [r7, #16]
      break;
 80028c8:	e027      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	0c9b      	lsrs	r3, r3, #18
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	4a17      	ldr	r2, [pc, #92]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028d4:	5cd3      	ldrb	r3, [r2, r3]
 80028d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d010      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028e2:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x94>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	0c5b      	lsrs	r3, r3, #17
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	4a11      	ldr	r2, [pc, #68]	@ (8002934 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028ee:	5cd3      	ldrb	r3, [r2, r3]
 80028f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a0d      	ldr	r2, [pc, #52]	@ (800292c <HAL_RCC_GetSysClockFreq+0x98>)
 80028f6:	fb03 f202 	mul.w	r2, r3, r2
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e004      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0c      	ldr	r2, [pc, #48]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002908:	fb02 f303 	mul.w	r3, r2, r3
 800290c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	613b      	str	r3, [r7, #16]
      break;
 8002912:	e002      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002914:	4b05      	ldr	r3, [pc, #20]	@ (800292c <HAL_RCC_GetSysClockFreq+0x98>)
 8002916:	613b      	str	r3, [r7, #16]
      break;
 8002918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291a:	693b      	ldr	r3, [r7, #16]
}
 800291c:	4618      	mov	r0, r3
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	007a1200 	.word	0x007a1200
 8002930:	08003ebc 	.word	0x08003ebc
 8002934:	08003ecc 	.word	0x08003ecc
 8002938:	003d0900 	.word	0x003d0900

0800293c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002940:	4b02      	ldr	r3, [pc, #8]	@ (800294c <HAL_RCC_GetHCLKFreq+0x10>)
 8002942:	681b      	ldr	r3, [r3, #0]
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	2000000c 	.word	0x2000000c

08002950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002954:	f7ff fff2 	bl	800293c <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4903      	ldr	r1, [pc, #12]	@ (8002974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	08003eb4 	.word	0x08003eb4

08002978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800297c:	f7ff ffde 	bl	800293c <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	0adb      	lsrs	r3, r3, #11
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	@ (800299c <HAL_RCC_GetPCLK2Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000
 800299c:	08003eb4 	.word	0x08003eb4

080029a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029a8:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <RCC_Delay+0x34>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <RCC_Delay+0x38>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	0a5b      	lsrs	r3, r3, #9
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	fb02 f303 	mul.w	r3, r2, r3
 80029ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029bc:	bf00      	nop
  }
  while (Delay --);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1e5a      	subs	r2, r3, #1
 80029c2:	60fa      	str	r2, [r7, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f9      	bne.n	80029bc <RCC_Delay+0x1c>
}
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	2000000c 	.word	0x2000000c
 80029d8:	10624dd3 	.word	0x10624dd3

080029dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d07d      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029f8:	2300      	movs	r3, #0
 80029fa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fc:	4b4f      	ldr	r3, [pc, #316]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10d      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4b4c      	ldr	r3, [pc, #304]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	4a4b      	ldr	r2, [pc, #300]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a12:	61d3      	str	r3, [r2, #28]
 8002a14:	4b49      	ldr	r3, [pc, #292]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a20:	2301      	movs	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b46      	ldr	r3, [pc, #280]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d118      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a30:	4b43      	ldr	r3, [pc, #268]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a42      	ldr	r2, [pc, #264]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3c:	f7fe fa8a 	bl	8000f54 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a42:	e008      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a44:	f7fe fa86 	bl	8000f54 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	@ 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e06d      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	4b3a      	ldr	r3, [pc, #232]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a62:	4b36      	ldr	r3, [pc, #216]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d02e      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d027      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a80:	4b2e      	ldr	r3, [pc, #184]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a90:	4b2c      	ldr	r3, [pc, #176]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a96:	4a29      	ldr	r2, [pc, #164]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d014      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fa55 	bl	8000f54 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aae:	f7fe fa51 	bl	8000f54 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e036      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0ee      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4917      	ldr	r1, [pc, #92]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae8:	4b14      	ldr	r3, [pc, #80]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	4a13      	ldr	r2, [pc, #76]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b00:	4b0e      	ldr	r3, [pc, #56]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	490b      	ldr	r1, [pc, #44]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	4904      	ldr	r1, [pc, #16]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40007000 	.word	0x40007000
 8002b44:	42420440 	.word	0x42420440

08002b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e041      	b.n	8002bde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fe f87e 	bl	8000c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f000 fc10 	bl	80033ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d001      	beq.n	8002c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e03a      	b.n	8002c76 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a18      	ldr	r2, [pc, #96]	@ (8002c80 <HAL_TIM_Base_Start_IT+0x98>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00e      	beq.n	8002c40 <HAL_TIM_Base_Start_IT+0x58>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c2a:	d009      	beq.n	8002c40 <HAL_TIM_Base_Start_IT+0x58>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a14      	ldr	r2, [pc, #80]	@ (8002c84 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d004      	beq.n	8002c40 <HAL_TIM_Base_Start_IT+0x58>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a13      	ldr	r2, [pc, #76]	@ (8002c88 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d111      	bne.n	8002c64 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d010      	beq.n	8002c74 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c62:	e007      	b.n	8002c74 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40000800 	.word	0x40000800

08002c8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e041      	b.n	8002d22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fd ffbe 	bl	8000c34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f000 fb6e 	bl	80033ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <HAL_TIM_PWM_Start+0x24>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	bf14      	ite	ne
 8002d48:	2301      	movne	r3, #1
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	e022      	b.n	8002d96 <HAL_TIM_PWM_Start+0x6a>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d109      	bne.n	8002d6a <HAL_TIM_PWM_Start+0x3e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	bf14      	ite	ne
 8002d62:	2301      	movne	r3, #1
 8002d64:	2300      	moveq	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	e015      	b.n	8002d96 <HAL_TIM_PWM_Start+0x6a>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d109      	bne.n	8002d84 <HAL_TIM_PWM_Start+0x58>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	bf14      	ite	ne
 8002d7c:	2301      	movne	r3, #1
 8002d7e:	2300      	moveq	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	e008      	b.n	8002d96 <HAL_TIM_PWM_Start+0x6a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	bf14      	ite	ne
 8002d90:	2301      	movne	r3, #1
 8002d92:	2300      	moveq	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e05e      	b.n	8002e5c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d104      	bne.n	8002dae <HAL_TIM_PWM_Start+0x82>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dac:	e013      	b.n	8002dd6 <HAL_TIM_PWM_Start+0xaa>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d104      	bne.n	8002dbe <HAL_TIM_PWM_Start+0x92>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dbc:	e00b      	b.n	8002dd6 <HAL_TIM_PWM_Start+0xaa>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d104      	bne.n	8002dce <HAL_TIM_PWM_Start+0xa2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dcc:	e003      	b.n	8002dd6 <HAL_TIM_PWM_Start+0xaa>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	6839      	ldr	r1, [r7, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fd70 	bl	80038c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e64 <HAL_TIM_PWM_Start+0x138>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d107      	bne.n	8002dfe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dfc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a18      	ldr	r2, [pc, #96]	@ (8002e64 <HAL_TIM_PWM_Start+0x138>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00e      	beq.n	8002e26 <HAL_TIM_PWM_Start+0xfa>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e10:	d009      	beq.n	8002e26 <HAL_TIM_PWM_Start+0xfa>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a14      	ldr	r2, [pc, #80]	@ (8002e68 <HAL_TIM_PWM_Start+0x13c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d004      	beq.n	8002e26 <HAL_TIM_PWM_Start+0xfa>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a12      	ldr	r2, [pc, #72]	@ (8002e6c <HAL_TIM_PWM_Start+0x140>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d111      	bne.n	8002e4a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b06      	cmp	r3, #6
 8002e36:	d010      	beq.n	8002e5a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e48:	e007      	b.n	8002e5a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40012c00 	.word	0x40012c00
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40000800 	.word	0x40000800

08002e70 <HAL_TIM_IRQHandler>:
  * @retval None
  */


void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d020      	beq.n	8002ed4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01b      	beq.n	8002ed4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0202 	mvn.w	r2, #2
 8002ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fa5a 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 8002ec0:	e005      	b.n	8002ece <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fa4d 	bl	8003362 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fa5c 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d020      	beq.n	8002f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d01b      	beq.n	8002f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0204 	mvn.w	r2, #4
 8002ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fa34 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 8002f0c:	e005      	b.n	8002f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fa27 	bl	8003362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fa36 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d020      	beq.n	8002f6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d01b      	beq.n	8002f6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0208 	mvn.w	r2, #8
 8002f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2204      	movs	r2, #4
 8002f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fa0e 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 8002f58:	e005      	b.n	8002f66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fa01 	bl	8003362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fa10 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d020      	beq.n	8002fb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01b      	beq.n	8002fb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0210 	mvn.w	r2, #16
 8002f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f9e8 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 8002fa4:	e005      	b.n	8002fb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f9db 	bl	8003362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f9ea 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00c      	beq.n	8002fdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0201 	mvn.w	r2, #1
 8002fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fd f914 	bl	8000204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00c      	beq.n	8003000 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fced 	bl	80039da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00c      	beq.n	8003024 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800301c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f9ba 	bl	8003398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00c      	beq.n	8003048 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0220 	mvn.w	r2, #32
 8003040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fcc0 	bl	80039c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003048:	bf00      	nop
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800306a:	2302      	movs	r3, #2
 800306c:	e0ae      	b.n	80031cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b0c      	cmp	r3, #12
 800307a:	f200 809f 	bhi.w	80031bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800307e:	a201      	add	r2, pc, #4	@ (adr r2, 8003084 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003084:	080030b9 	.word	0x080030b9
 8003088:	080031bd 	.word	0x080031bd
 800308c:	080031bd 	.word	0x080031bd
 8003090:	080031bd 	.word	0x080031bd
 8003094:	080030f9 	.word	0x080030f9
 8003098:	080031bd 	.word	0x080031bd
 800309c:	080031bd 	.word	0x080031bd
 80030a0:	080031bd 	.word	0x080031bd
 80030a4:	0800313b 	.word	0x0800313b
 80030a8:	080031bd 	.word	0x080031bd
 80030ac:	080031bd 	.word	0x080031bd
 80030b0:	080031bd 	.word	0x080031bd
 80030b4:	0800317b 	.word	0x0800317b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f9e2 	bl	8003488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0208 	orr.w	r2, r2, #8
 80030d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0204 	bic.w	r2, r2, #4
 80030e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6999      	ldr	r1, [r3, #24]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	619a      	str	r2, [r3, #24]
      break;
 80030f6:	e064      	b.n	80031c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fa28 	bl	8003554 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6999      	ldr	r1, [r3, #24]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	021a      	lsls	r2, r3, #8
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	619a      	str	r2, [r3, #24]
      break;
 8003138:	e043      	b.n	80031c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fa71 	bl	8003628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	69da      	ldr	r2, [r3, #28]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0208 	orr.w	r2, r2, #8
 8003154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0204 	bic.w	r2, r2, #4
 8003164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69d9      	ldr	r1, [r3, #28]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	61da      	str	r2, [r3, #28]
      break;
 8003178:	e023      	b.n	80031c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fabb 	bl	80036fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69da      	ldr	r2, [r3, #28]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69d9      	ldr	r1, [r3, #28]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	021a      	lsls	r2, r3, #8
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	61da      	str	r2, [r3, #28]
      break;
 80031ba:	e002      	b.n	80031c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	75fb      	strb	r3, [r7, #23]
      break;
 80031c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_TIM_ConfigClockSource+0x1c>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e0b4      	b.n	800335a <HAL_TIM_ConfigClockSource+0x186>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800320e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003216:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003228:	d03e      	beq.n	80032a8 <HAL_TIM_ConfigClockSource+0xd4>
 800322a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800322e:	f200 8087 	bhi.w	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003236:	f000 8086 	beq.w	8003346 <HAL_TIM_ConfigClockSource+0x172>
 800323a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800323e:	d87f      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003240:	2b70      	cmp	r3, #112	@ 0x70
 8003242:	d01a      	beq.n	800327a <HAL_TIM_ConfigClockSource+0xa6>
 8003244:	2b70      	cmp	r3, #112	@ 0x70
 8003246:	d87b      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003248:	2b60      	cmp	r3, #96	@ 0x60
 800324a:	d050      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x11a>
 800324c:	2b60      	cmp	r3, #96	@ 0x60
 800324e:	d877      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003250:	2b50      	cmp	r3, #80	@ 0x50
 8003252:	d03c      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0xfa>
 8003254:	2b50      	cmp	r3, #80	@ 0x50
 8003256:	d873      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003258:	2b40      	cmp	r3, #64	@ 0x40
 800325a:	d058      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x13a>
 800325c:	2b40      	cmp	r3, #64	@ 0x40
 800325e:	d86f      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003260:	2b30      	cmp	r3, #48	@ 0x30
 8003262:	d064      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x15a>
 8003264:	2b30      	cmp	r3, #48	@ 0x30
 8003266:	d86b      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003268:	2b20      	cmp	r3, #32
 800326a:	d060      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x15a>
 800326c:	2b20      	cmp	r3, #32
 800326e:	d867      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d05c      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x15a>
 8003274:	2b10      	cmp	r3, #16
 8003276:	d05a      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x15a>
 8003278:	e062      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800328a:	f000 fafc 	bl	8003886 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800329c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	609a      	str	r2, [r3, #8]
      break;
 80032a6:	e04f      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032b8:	f000 fae5 	bl	8003886 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032ca:	609a      	str	r2, [r3, #8]
      break;
 80032cc:	e03c      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032da:	461a      	mov	r2, r3
 80032dc:	f000 fa5c 	bl	8003798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2150      	movs	r1, #80	@ 0x50
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fab3 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 80032ec:	e02c      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032fa:	461a      	mov	r2, r3
 80032fc:	f000 fa7a 	bl	80037f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2160      	movs	r1, #96	@ 0x60
 8003306:	4618      	mov	r0, r3
 8003308:	f000 faa3 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 800330c:	e01c      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800331a:	461a      	mov	r2, r3
 800331c:	f000 fa3c 	bl	8003798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2140      	movs	r1, #64	@ 0x40
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fa93 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 800332c:	e00c      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4619      	mov	r1, r3
 8003338:	4610      	mov	r0, r2
 800333a:	f000 fa8a 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 800333e:	e003      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      break;
 8003344:	e000      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003346:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003358:	7bfb      	ldrb	r3, [r7, #15]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
	...

080033ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a2f      	ldr	r2, [pc, #188]	@ (800347c <TIM_Base_SetConfig+0xd0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00b      	beq.n	80033dc <TIM_Base_SetConfig+0x30>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ca:	d007      	beq.n	80033dc <TIM_Base_SetConfig+0x30>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003480 <TIM_Base_SetConfig+0xd4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d003      	beq.n	80033dc <TIM_Base_SetConfig+0x30>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003484 <TIM_Base_SetConfig+0xd8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d108      	bne.n	80033ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a22      	ldr	r2, [pc, #136]	@ (800347c <TIM_Base_SetConfig+0xd0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00b      	beq.n	800340e <TIM_Base_SetConfig+0x62>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033fc:	d007      	beq.n	800340e <TIM_Base_SetConfig+0x62>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a1f      	ldr	r2, [pc, #124]	@ (8003480 <TIM_Base_SetConfig+0xd4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d003      	beq.n	800340e <TIM_Base_SetConfig+0x62>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a1e      	ldr	r2, [pc, #120]	@ (8003484 <TIM_Base_SetConfig+0xd8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d108      	bne.n	8003420 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a0d      	ldr	r2, [pc, #52]	@ (800347c <TIM_Base_SetConfig+0xd0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d103      	bne.n	8003454 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f023 0201 	bic.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	611a      	str	r2, [r3, #16]
  }
}
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	40012c00 	.word	0x40012c00
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800

08003488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f023 0201 	bic.w	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0303 	bic.w	r3, r3, #3
 80034be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f023 0302 	bic.w	r3, r3, #2
 80034d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a1c      	ldr	r2, [pc, #112]	@ (8003550 <TIM_OC1_SetConfig+0xc8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d10c      	bne.n	80034fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f023 0308 	bic.w	r3, r3, #8
 80034ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a13      	ldr	r2, [pc, #76]	@ (8003550 <TIM_OC1_SetConfig+0xc8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d111      	bne.n	800352a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800350c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	621a      	str	r2, [r3, #32]
}
 8003544:	bf00      	nop
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40012c00 	.word	0x40012c00

08003554 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f023 0210 	bic.w	r2, r3, #16
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800358a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f023 0320 	bic.w	r3, r3, #32
 800359e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003624 <TIM_OC2_SetConfig+0xd0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d10d      	bne.n	80035d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a14      	ldr	r2, [pc, #80]	@ (8003624 <TIM_OC2_SetConfig+0xd0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d113      	bne.n	8003600 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	621a      	str	r2, [r3, #32]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr
 8003624:	40012c00 	.word	0x40012c00

08003628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0303 	bic.w	r3, r3, #3
 800365e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a1d      	ldr	r2, [pc, #116]	@ (80036f8 <TIM_OC3_SetConfig+0xd0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d10d      	bne.n	80036a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800368c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a14      	ldr	r2, [pc, #80]	@ (80036f8 <TIM_OC3_SetConfig+0xd0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d113      	bne.n	80036d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	621a      	str	r2, [r3, #32]
}
 80036ec:	bf00      	nop
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40012c00 	.word	0x40012c00

080036fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800372a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	031b      	lsls	r3, r3, #12
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a0f      	ldr	r2, [pc, #60]	@ (8003794 <TIM_OC4_SetConfig+0x98>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d109      	bne.n	8003770 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003762:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	019b      	lsls	r3, r3, #6
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	621a      	str	r2, [r3, #32]
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	40012c00 	.word	0x40012c00

08003798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	f023 0201 	bic.w	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f023 030a 	bic.w	r3, r3, #10
 80037d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	621a      	str	r2, [r3, #32]
}
 80037ea:	bf00      	nop
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr

080037f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	f023 0210 	bic.w	r2, r3, #16
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800381e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	031b      	lsls	r3, r3, #12
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003830:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	621a      	str	r2, [r3, #32]
}
 8003848:	bf00      	nop
 800384a:	371c      	adds	r7, #28
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003868:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	f043 0307 	orr.w	r3, r3, #7
 8003874:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	609a      	str	r2, [r3, #8]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr

08003886 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003886:	b480      	push	{r7}
 8003888:	b087      	sub	sp, #28
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	021a      	lsls	r2, r3, #8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	609a      	str	r2, [r3, #8]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	2201      	movs	r2, #1
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a1a      	ldr	r2, [r3, #32]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	401a      	ands	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a1a      	ldr	r2, [r3, #32]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	fa01 f303 	lsl.w	r3, r1, r3
 80038fc:	431a      	orrs	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	621a      	str	r2, [r3, #32]
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003920:	2302      	movs	r3, #2
 8003922:	e046      	b.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800394a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a16      	ldr	r2, [pc, #88]	@ (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00e      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003970:	d009      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a12      	ldr	r2, [pc, #72]	@ (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a10      	ldr	r2, [pc, #64]	@ (80039c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d10c      	bne.n	80039a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800398c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	4313      	orrs	r3, r2
 8003996:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	40000400 	.word	0x40000400
 80039c4:	40000800 	.word	0x40000800

080039c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr

080039da <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr

080039ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e042      	b.n	8003a84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fd f984 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2224      	movs	r2, #36	@ 0x24
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f971 	bl	8003d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	@ 0x28
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d175      	bne.n	8003b98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_UART_Transmit+0x2c>
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e06e      	b.n	8003b9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2221      	movs	r2, #33	@ 0x21
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aca:	f7fd fa43 	bl	8000f54 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	88fa      	ldrh	r2, [r7, #6]
 8003ad4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	88fa      	ldrh	r2, [r7, #6]
 8003ada:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ae4:	d108      	bne.n	8003af8 <HAL_UART_Transmit+0x6c>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	e003      	b.n	8003b00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b00:	e02e      	b.n	8003b60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2180      	movs	r1, #128	@ 0x80
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f848 	bl	8003ba2 <UART_WaitOnFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e03a      	b.n	8003b9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10b      	bne.n	8003b42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	3302      	adds	r3, #2
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	e007      	b.n	8003b52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	781a      	ldrb	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1cb      	bne.n	8003b02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2200      	movs	r2, #0
 8003b72:	2140      	movs	r1, #64	@ 0x40
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f814 	bl	8003ba2 <UART_WaitOnFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e006      	b.n	8003b9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e000      	b.n	8003b9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b086      	sub	sp, #24
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	603b      	str	r3, [r7, #0]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb2:	e03b      	b.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d037      	beq.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbc:	f7fd f9ca 	bl	8000f54 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	6a3a      	ldr	r2, [r7, #32]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d302      	bcc.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e03a      	b.n	8003c4c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d023      	beq.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b80      	cmp	r3, #128	@ 0x80
 8003be8:	d020      	beq.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b40      	cmp	r3, #64	@ 0x40
 8003bee:	d01d      	beq.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d116      	bne.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f81d 	bl	8003c54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e00f      	b.n	8003c4c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4013      	ands	r3, r2
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	bf0c      	ite	eq
 8003c3c:	2301      	moveq	r3, #1
 8003c3e:	2300      	movne	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	461a      	mov	r2, r3
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d0b4      	beq.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b095      	sub	sp, #84	@ 0x54
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c7c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e5      	bne.n	8003c5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3314      	adds	r3, #20
 8003c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3314      	adds	r3, #20
 8003cae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e5      	bne.n	8003c90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d119      	bne.n	8003d00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f023 0310 	bic.w	r3, r3, #16
 8003ce2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	330c      	adds	r3, #12
 8003cea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cec:	61ba      	str	r2, [r7, #24]
 8003cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6979      	ldr	r1, [r7, #20]
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e5      	bne.n	8003ccc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d0e:	bf00      	nop
 8003d10:	3754      	adds	r7, #84	@ 0x54
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003d52:	f023 030c 	bic.w	r3, r3, #12
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003e2c <UART_SetConfig+0x114>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d103      	bne.n	8003d88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d80:	f7fe fdfa 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	e002      	b.n	8003d8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d88:	f7fe fde2 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8003d8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	009a      	lsls	r2, r3, #2
 8003d98:	441a      	add	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	4a22      	ldr	r2, [pc, #136]	@ (8003e30 <UART_SetConfig+0x118>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	0119      	lsls	r1, r3, #4
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	009a      	lsls	r2, r3, #2
 8003db8:	441a      	add	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e30 <UART_SetConfig+0x118>)
 8003dc6:	fba3 0302 	umull	r0, r3, r3, r2
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	2064      	movs	r0, #100	@ 0x64
 8003dce:	fb00 f303 	mul.w	r3, r0, r3
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	3332      	adds	r3, #50	@ 0x32
 8003dd8:	4a15      	ldr	r2, [pc, #84]	@ (8003e30 <UART_SetConfig+0x118>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003de4:	4419      	add	r1, r3
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	009a      	lsls	r2, r3, #2
 8003df0:	441a      	add	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e30 <UART_SetConfig+0x118>)
 8003dfe:	fba3 0302 	umull	r0, r3, r3, r2
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2064      	movs	r0, #100	@ 0x64
 8003e06:	fb00 f303 	mul.w	r3, r0, r3
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	3332      	adds	r3, #50	@ 0x32
 8003e10:	4a07      	ldr	r2, [pc, #28]	@ (8003e30 <UART_SetConfig+0x118>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	f003 020f 	and.w	r2, r3, #15
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	440a      	add	r2, r1
 8003e22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40013800 	.word	0x40013800
 8003e30:	51eb851f 	.word	0x51eb851f

08003e34 <memset>:
 8003e34:	4603      	mov	r3, r0
 8003e36:	4402      	add	r2, r0
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d100      	bne.n	8003e3e <memset+0xa>
 8003e3c:	4770      	bx	lr
 8003e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e42:	e7f9      	b.n	8003e38 <memset+0x4>

08003e44 <__libc_init_array>:
 8003e44:	b570      	push	{r4, r5, r6, lr}
 8003e46:	2600      	movs	r6, #0
 8003e48:	4d0c      	ldr	r5, [pc, #48]	@ (8003e7c <__libc_init_array+0x38>)
 8003e4a:	4c0d      	ldr	r4, [pc, #52]	@ (8003e80 <__libc_init_array+0x3c>)
 8003e4c:	1b64      	subs	r4, r4, r5
 8003e4e:	10a4      	asrs	r4, r4, #2
 8003e50:	42a6      	cmp	r6, r4
 8003e52:	d109      	bne.n	8003e68 <__libc_init_array+0x24>
 8003e54:	f000 f81a 	bl	8003e8c <_init>
 8003e58:	2600      	movs	r6, #0
 8003e5a:	4d0a      	ldr	r5, [pc, #40]	@ (8003e84 <__libc_init_array+0x40>)
 8003e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8003e88 <__libc_init_array+0x44>)
 8003e5e:	1b64      	subs	r4, r4, r5
 8003e60:	10a4      	asrs	r4, r4, #2
 8003e62:	42a6      	cmp	r6, r4
 8003e64:	d105      	bne.n	8003e72 <__libc_init_array+0x2e>
 8003e66:	bd70      	pop	{r4, r5, r6, pc}
 8003e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e6c:	4798      	blx	r3
 8003e6e:	3601      	adds	r6, #1
 8003e70:	e7ee      	b.n	8003e50 <__libc_init_array+0xc>
 8003e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e76:	4798      	blx	r3
 8003e78:	3601      	adds	r6, #1
 8003e7a:	e7f2      	b.n	8003e62 <__libc_init_array+0x1e>
 8003e7c:	08003ed8 	.word	0x08003ed8
 8003e80:	08003ed8 	.word	0x08003ed8
 8003e84:	08003ed8 	.word	0x08003ed8
 8003e88:	08003edc 	.word	0x08003edc

08003e8c <_init>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	bf00      	nop
 8003e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e92:	bc08      	pop	{r3}
 8003e94:	469e      	mov	lr, r3
 8003e96:	4770      	bx	lr

08003e98 <_fini>:
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	bf00      	nop
 8003e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9e:	bc08      	pop	{r3}
 8003ea0:	469e      	mov	lr, r3
 8003ea2:	4770      	bx	lr
